//======================================================================================================================
//										General Scripts that don't serve one set purpose
//======================================================================================================================

//SCRIPTS
//200:
//201: Check if SP/DM/co-op for the Tome of Power/Morph Ovum.
//202: Cooldown for Tome of Power.
//203: Take away all the shit on level ending!
//204: Boss monologues.
//205: Cooldown for Duke's taunts.
//207: Flechette cooldown.
//208: Buddha mode for B.J.'s Extra Life.
//209: Activate Send Full Button Info and activate sv_banjetpack/sv_lmslife/sv_lmsult.
//212: Displaying text.
//214: Duke Jetpack/Visor fuel draining.
//901-902: I'm pretty sure Synert is a wizard, too.
//224: Doomguy's vanilla animations. By Ijon Tichy, transcribed by Llewellyn.
//225: Weapon bar. By Ijon Tichy, transcribed by Llewellyn.

script "SamsaraDecorate" (int choice, int arg1, int arg2) //215 - SAMSARA_DECORATE
{
    int clipcount;
    int result;
    int i, j, k;
    int x, y, z;
    int armorIndex, armorToSet;
    int pln = PlayerNumber();
    
    switch (choice)
    {
      case 1:
        result = GetActorProperty(0, APROP_Dropped);
        break;
        
      case 2:
        if (CheckInventory("WolfenMovement") == 1) { SetActorState(0, "Spawn"); }
        break;
        
      case 3:
        result = !(GetCVar("sv_itemrespawn") || GetCVar("sv_weaponstay"));
        break;
        
      case 4:
        result = isInvasion() || !(isCoop() || isSinglePlayer());
        break;

      case 5:
        SetActivatorToTarget(0);

        if (arg1) { result = CheckInventory("PlasmaCell"); }
        else { result = CheckInventory("Cell"); }
        break;

      case 6:
        result = GetCVar("skulltag");
        break;
      
      case 7:
        if (arg2 != 1)
        {
            GiveQuad(arg1);
        }
        else
        {
            if (isLMS())
            {
                if (GetCvar("samsara_permaquad") == 1)
                { GiveInventory("QuadDamageItem", 1); }
                break;
            }

            GiveQuad(arg1);

            if (GetCvar("samsara_permaquad") == 1)//if (isCoop() || isSinglePlayer())
            { GiveInventory("QuadDamageItem", 1); }
        }
        break;

      case 8:
        result = defaultCVar("samsara_cl_expparticles", 0);
        if (!result) { result = 100; }

        result = max(0, result);

        result *= max(arg1, 1);
        result /= max(arg2, 1);

        GiveInventory("QuakeExplosionCounter", result);
        break;

      case 9:
        clipcount = CheckInventory("Clip");

        if (clipcount < 50)
        {
            GiveInventory("Clip", 50 - clipcount);
            TakeInventory("Clip", CheckInventory("Clip") - 50);
            result = 1;
        }
        break;

      case 10:
        TakeInventory("QuakeExplosionCounter", arg1);
        result = CheckInventory("QuakeExplosionCounter");
        break;

      case 15:
        SetActorProperty(0, APROP_Speed, percFloat(arg1, arg2));
        break;
        
      case 16:
        if (GameType () != GAME_SINGLE_PLAYER)
        {
            SetHudSize(400, 300, 0);
            Hudmessage(l:"DUKEDEADMESSAGE";
            HUDMSG_PLAIN,1024,CR_LIGHTBLUE,200.4,9.1,1.75);
            delay(15);

            if (!CheckInventory("DukeBallgag"))
            {
                LocalAmbientSound("duke/mpdeath",127);
                GiveInventory("DukeTauntCooldown",5);
                ACS_NamedExecuteAlways("DukeTauntCooldown",0,0);
            }
        }
        break;

      case 17:
        if (arg1) { result = GetCVar("samsara_permault"); }
        else { result = GetCVar("sv_weaponstay"); }
        break;

      case 18:
        if (MapArmors[0] == -1) { CheckMapArmors(); }
        SetArmorMode();

        i = Timer() != 0;

        if (MapArmors[ARMOR_YELLOW] == 1) { i += 2; }

        SetActorState(0, ArmorModeStates[ArmorMode][i]);
        break;

      case 19:
        result = isLMS();
        break;

      case 20:
        SetArmorMode();

        armorIndex = -1;
        armorToSet = arg1;

        for (i = 0; i < ARMORCOUNT; i++)
        {
            if (GetArmorType(ArmorItems[ArmorMode][i][0], pln))
            {
                armorIndex = i;
                break;
            }
        }

        arg1 = middle(0, arg1, ARMORCOUNT-1);
        i = CheckInventory("Armor");
        j = ArmorItems[ArmorMode][arg1][1];

        if (j == 0) { result = 0; break; }


        /* If we're adding armor, always follow through
           Else, if the ending armor count is lower than the current armor count
           and we're not upgrading our armor, give up now */

        if (arg2 > 0)
        {
            if (arg1 <= armorIndex) { armorToSet = armorIndex; }
        }
        else if (((arg2 == 0 && i > j) || (arg2 < 0 && i > -arg2)) && (arg1 <= armorIndex))
        {
            result = 0;
            break;
        }

        if (arg2 <= 0)
        {
            TakeInventory("BasicArmor", i);
            GiveInventory(ArmorItems[ArmorMode][armorToSet][0], 1);

            k = CheckInventory("Armor");

            if (arg2 == 0) { break; }

            TakeInventory("BasicArmor", k-1);
            GiveInventory("InfiniteArmorBonus", -arg2 - 1);
        }
        else
        {
            TakeInventory("BasicArmor", i);
            GiveInventory(ArmorItems[ArmorMode][armorToSet][0], 1);

            k = CheckInventory("Armor");
            TakeInventory("BasicArmor", k-1);

            GiveInventory("InfiniteArmorBonus", (i + arg2) - 1);
        }

        result = 1;
        break;

      case 21:
        i = CheckInventory("Armor");
        if (i < arg1) { result = 0; break; }

        TakeInventory("BasicArmor", i-arg1);
        result = 1;
        break;

      case 22:
        result = GetCVar("samsara_nohealthcap");
        break;

      case 23:
        GiveInventory("TimeBombPause", 1);
        Delay(arg1);
        TakeInventory("TimeBombPause", 1);
        break;

      case 24:
        result = GetCVar("samsara_noult");
        break;

      case 25:
        if (GameType() == GAME_NET_COOPERATIVE)
		{ AmbientSound("quake/invisannouncer",127); }
		else
		{ LocalAmbientSound("quake/invisannouncer",127); }
        break;
		
	  case 26:
	    if (CheckInventory("PowerInvisibility") == 0)
		{ GiveInventory("PowerInvisibility",1); }
		else
		{ TakeInventory("PowerInvisibility",1); 
		delay(1);
		GiveInventory("PowerShadow",1);
		delay(1);
		GiveInventory("PowerShadow",1); }
	    break;

      case 27:
        result = GetCVar("samsara_nounique");
        break;

      case 28:
        result = GetCVar("samsara_noinvuln");
        break;

      case 29:
        result = GetCVar("instagib");
        break;

      case 30:
		if (GetCVar("samsara_runninginzdoom") == 1)
		{
			result = GetCVar("samsara_zd_bloodyhell");
			//log(s:"ZDoom ",i:result);
		} else {
			result = GetCVar("samsara_cl_bloodyhell");
			//log(s:"Zandro ",i:result);
		}
        break;

      case 31:
        if (GetCVar("samsara_runninginzdoom") == 1)
		{
			result = GetCVar("samsara_zd_bloodypersistent");
		} else {
			result = GetCVar("samsara_cl_bloodypersistent");
		}
        break;

      case 32:
        result = GetCVar("samsara_nohealth");
        break;

      case 33:
        result = GetCVar("samsara_vanillaquake");
        break;
		
		case 34:
            if (!CheckInventory("EleenaBallgag"))
            {
                LocalAmbientSound("Eleena/Suicide",127);
                GiveInventory("EleenaTauntCooldown",5);
                ACS_NamedExecuteAlways("EleenaTauntCooldown",0,0);
            }
        break;	
		
	case 35:
		SetResultValue(pln);
		break;
		
	  case 36: //we're kinda stuck with this, for now
		if(arg1 == 1)
			result = GetCVar("samsara_microwavepop");
			
		else
			{
				if(arg2 == 0)
					result = SpawnForced("RPGExplosion", GetActorX(0), GetActorY(0), GetActorZ(0) + (GetActorProperty(0,APROP_Height) * 2), 0, 0);
				else
					result = SpawnForced("RPGExplosion", GetActorX(0), GetActorY(0), GetActorZ(0) + (GetActorProperty(0,APROP_Height) / 2), 0, 0);
			}
			
		break;
		
	  case 37:
        if (GameType () != GAME_SINGLE_PLAYER)
        {
            SetHudSize(400, 300, 0);
            Hudmessage(s:"Mash activator key to kill again!"; HUDMSG_PLAIN,1024,CR_WHITE,200.4,9.1,1.75);
            delay(15);

            if (!CheckInventory("LeonardBallgag"))
            {
                LocalAmbientSound("leonard/mpdeath",127);
                GiveInventory("LeonardTauntCooldown",5);
                ACS_NamedExecuteAlways("LeonardTauntCooldown",0,0);
            }
        }
        break;
		
	  case 38:
		if(GetCvar("samsara_notimefreeze"))
		{
			GiveInventory("InvulnPowerup",1);
		}
		else
		{
			if(CheckInventory("CorvusClass"))
			{
				PlaySound(0,"heretic/itemget");
				GiveInventory("TimeFreezeSphereHeretic",1);		
			}
			else
			{
				PlaySound(0,"misc/p_pkup", CHAN_ITEM);
				GiveInventory("PowerTimeFreezer",1);
				GiveInventory("PowerTimeFreezerColor",1);
			}
		}
		break;
	  case 39:
		SetActorProperty(0,APROP_Renderstyle,STYLE_NORMAL);
		break;
	  case 40:
		Delay(3);
		TakeInventory("DaedalonInRange",1);
		break;
	  case 41:
		Thing_ChangeTid(0,UniqueTid());
		break;

	  case 42:
        if (arg1)
        {
            if (MapArmors[0] == -1) { CheckMapArmors(); }
            SetArmorMode();

            if (MapArmors[ARMOR_YELLOW] == 1) { i = 1; }
            else { i = 0; }

            result = i;
        } else {
            SetArmorMode();

            result = ArmorMode;
        }
		break;
	  case 43:
		result = onLiquid(0);
		break;
    }
    
    SetResultValue(result);
}

script "SamsaraClientDecorate" (int which, int a1, int a2) clientside //212 -- SAMSARA_CLIENT_DECORATE
{
    int i, j, k;
    int x, y, z;
	int result;
    int deathresult;
    int xdeathresult;

    SetFont("SMALLFONT");
    switch (which)
    {
      case 1:
        Print(l:"NOTUNLESSINJURED");
        break;
        
      case 2:
        Print(s:"");
        break;
        
      case 3:
        SetHudSize(400, 300, 0);
        Hudmessage(l:"FOOTENGAGED";
        HUDMSG_PLAIN,1024,CR_LIGHTBLUE,200.4,9.1,1.0);
        break;

      case 4:
        while (1)
        {
            if (defaultCVar("samsara_cl_noadditivepickups", 0))
            {
                SetActorProperty(0, APROP_RenderStyle, STYLE_Normal);
                SetActorProperty(0, APROP_Alpha, itof(a1)/100);
            }
            else
            {
                SetActorProperty(0, APROP_RenderStyle, STYLE_Add);
                SetActorProperty(0, APROP_Alpha, itof(a2)/100);
            }

            Delay(35);
        }
        break;
        
      case 5:
        Print(l:"NOFUEL");
        break;
        
      case 6:
        Print(l:"NOPOWER");
        break;
        
      case 7:
        Print(l:"ALREADYFLYING");
        break;

      case 9:
        x = GetActorX(0); y = GetActorY(0); z = GetActorZ(0);
        i = GetActorPitch(0);
        j = GetActorAngle(0);
        k = unusedTID(4000, 14000);

        z += itof(cond(keyDown(BT_CROUCH), random(10, 14), random(30, 34)));
        Spawn("GauntletSparks", x + FixedMul(cos(i), 16 * cos(j)), y + FixedMul(cos(i), 16 * sin(j)), z - (16 * sin(i)), k);
        SetActorVelocity(k, GetActorVelX(0), GetActorVelY(0), GetActorVelZ(0), 0,0);
        break;
		
    case 10:
        if (GetCVar("samsara_runninginzdoom") == 1)
		{
			if(GetCvar("samsara_zd_bloodyhell") == -2) { SetActorState(0,"XDeathComic"); }	
			else if(GetCvar("samsara_zd_bloodyhell") == -1) { SetActorState(0,"XDeathHappyfun"); }
			else if(GetCvar("samsara_zd_bloodyhell") == 1) { SetActorState(0,"XDeathNashgore"); }
			else if(GetCvar("samsara_zd_bloodyhell") == 2) { SetActorState(0,"XDeathBrutal"); }
			else if(GetCvar("samsara_zd_bloodyhell") == 3) { xdeathresult = random(1,2);	
			if(xdeathresult==1) { SetActorState(0,"XDeathNightmare1"); }
			else if(xdeathresult==2) { SetActorState(0,"XDeathNightmare2"); } } 
			else if(GetCvar("samsara_zd_bloodyhell") == 4) { SetActorState(0,"XDeathBolognese"); }	
		} else {
			if(GetUserCvar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == -2) { SetActorState(0,"XDeathComic"); }	
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == -1) { SetActorState(0,"XDeathHappyfun"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 1) { SetActorState(0,"XDeathNashgore"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 2) { SetActorState(0,"XDeathBrutal"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 3) { xdeathresult = random(1,2);
			if(xdeathresult==1) { SetActorState(0,"XDeathNightmare1"); }
			else if(xdeathresult==2) { SetActorState(0,"XDeathNightmare2"); } } 
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 4) { SetActorState(0,"XDeathBolognese"); }
		}
        break;
		
    case 11:
	    if (GetCVar("samsara_runninginzdoom") == 1)
		{
			if(GetCvar("samsara_zd_bloodyhell") == -2) { SetActorState(0,"DeathComic"); }
			else if(GetCvar("samsara_zd_bloodyhell") == -1) { SetActorState(0,"DeathHappyfun"); }
			else if(GetCvar("samsara_zd_bloodyhell") == 1) { SetActorState(0,"DeathNashgore"); }
			else if(GetCvar("samsara_zd_bloodyhell") == 2) { SetActorState(0,"DeathBrutal"); }
			else if(GetCvar("samsara_zd_bloodyhell") == 3) { deathresult = random(1,6);
			if(deathresult==1) { SetActorState(0,"DeathNightmare1"); }
			else if(deathresult==2) { SetActorState(0,"DeathNightmare2"); }
			else if(deathresult==3) { SetActorState(0,"DeathNightmare3"); }
			else if(deathresult==4) { SetActorState(0,"DeathNightmare4"); }
			else if(deathresult==5) { SetActorState(0,"DeathNightmare5"); }
			else if(deathresult==6) { SetActorState(0,"DeathNightmare6"); } } 
			else if(GetCvar("samsara_zd_bloodyhell") == 4) { SetActorState(0,"DeathBolognese"); }
			break;
		} else {
			if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == -2) { SetActorState(0,"DeathComic"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == -1) { SetActorState(0,"DeathHappyfun"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 1) { SetActorState(0,"DeathNashgore"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 2) { SetActorState(0,"DeathBrutal"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 3) { deathresult = random(1,6);
			if(deathresult==1) { SetActorState(0,"DeathNightmare1"); }
			else if(deathresult==2) { SetActorState(0,"DeathNightmare2"); }
			else if(deathresult==3) { SetActorState(0,"DeathNightmare3"); }
			else if(deathresult==4) { SetActorState(0,"DeathNightmare4"); }
			else if(deathresult==5) { SetActorState(0,"DeathNightmare5"); }
			else if(deathresult==6) { SetActorState(0,"DeathNightmare6"); } } 
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 4) { SetActorState(0,"DeathBolognese"); }
			break;
		}
        break;
		
	case 12:
		//Many players won't use this option, so it's best to check default to cut back on if statements
	    if (GetCVar("samsara_runninginzdoom") == 1)
		{
			if(GetCVar("samsara_zd_bloodyhell") == 0) { SetActorState(0,"SpawnNormal"); }
			else if(GetCvar("samsara_zd_bloodyhell") == -2 ) { SetActorState(0,"SpawnComic"); }
			else if(GetCvar("samsara_zd_bloodyhell") == -1) { SetActorState(0,"SpawnHappyfun"); }
			else if(GetCvar("samsara_zd_bloodyhell") == 1 && !CheckActorClass(0,"Switchable_FlyingBlood_NonViolent")) { SetActorState(0,"SpawnNashgore"); }
			else if(GetCvar("samsara_zd_bloodyhell") == 2 && !CheckActorClass(0,"Switchable_FlyingBlood_NonViolent")) { SetActorState(0,"SpawnBrutal"); }
			else if(GetCvar("samsara_zd_bloodyhell") == 3 && !CheckActorClass(0,"Switchable_FlyingBlood_NonViolent")) { SetActorState(0,"SpawnNightmare"); }
			else if(GetCvar("samsara_zd_bloodyhell") == 4 && !CheckActorClass(0,"Switchable_FlyingBlood_NonViolent")) { SetActorState(0,"SpawnBolognese"); }
			else if(!CheckActorClass(0,"Switchable_FlyingBlood_NonViolent")) { SetActorState(0,"SpawnNormal"); }
		} else {
			if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 0) { SetActorState(0,"SpawnNormal"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == -2) { SetActorState(0,"SpawnComic"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == -1) { SetActorState(0,"SpawnHappyFun"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 1 && !CheckActorClass(0,"Switchable_FlyingBlood_NonViolent")) { SetActorState(0,"SpawnNashgore"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 2 && !CheckActorClass(0,"Switchable_FlyingBlood_NonViolent")) { SetActorState(0,"SpawnBrutal"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 3 && !CheckActorClass(0,"Switchable_FlyingBlood_NonViolent")) { SetActorState(0,"SpawnNightmare"); }
			else if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 4 && !CheckActorClass(0,"Switchable_FlyingBlood_NonViolent")) { SetActorState(0,"SpawnBolognese"); }
			else if(!CheckActorClass(0,"Switchable_FlyingBlood_NonViolent")) { SetActorState(0,"SpawnNormal"); }
		}
        break;
	
	case 13:
	    if (GetCVar("samsara_runninginzdoom") == 1)
		{
			result = GetCVar("samsara_zd_bloodypersistent");
		} else {
			result = GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodypersistent");
		}
        break;
	
	case 14:
		if (GetCVar("samsara_runninginzdoom") == 1)
			result = GetCVar("samsara_cl_dkclab");
			
		else
			result = GetUserCVar(ConsolePlayerNumber(), "samsara_cl_dkclab");
			
		break;
	case 15:
	    if (GetCVar("samsara_runninginzdoom") == 1)
		{
			if(GetCvar("samsara_zd_bloodyhell") == -2) { SetActorState(0,"CrashComic"); }
			if(GetCvar("samsara_zd_bloodyhell") == -1) { SetActorState(0,"CrashHappyfun"); }
			if(GetCvar("samsara_zd_bloodyhell") == 1) { SetActorState(0,"CrashNashgore"); }
			if(GetCvar("samsara_zd_bloodyhell") == 2) { SetActorState(0,"CrashBrutal"); }
			if(GetCvar("samsara_zd_bloodyhell") == 3) { SetActorState(0,"CrashNightmare"); }
			if(GetCvar("samsara_zd_bloodyhell") == 4) { SetActorState(0,"CrashBolognese"); }
		} else {
			if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == -2) { SetActorState(0,"CrashComic"); }
			if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == -1) { SetActorState(0,"CrashHappy"); }
			if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 1) { SetActorState(0,"CrashNashgore"); }
			if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 2) { SetActorState(0,"CrashBrutal"); }
			if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 3) { SetActorState(0,"CrashNightmare"); }
			if(GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodyhell") == 4) { SetActorState(0,"CrashBolognese"); }
		}
        break;
    }
    
    SetResultValue(result);
}

//======================================================================================================================
//												Hotkey Scripts
//======================================================================================================================

Script "Samsara_WeaponHotkeys" (int mode)
{
	int pln = PlayerNumber();
	if(!SetWeapon(ClassHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode]))
		UseInventory(ClassHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode]);
}

// Until Zandronum doesn't crash with the old keybindings in KEYCONF, this will be required, I'm afraid

script "Samsara_Keybinds" (int button) NET
{
    int pln = PlayerNumber(); // ensure only the activator gets the messages
    int cpln = ConsolePlayerNumber();

    int cvarsetting = 0;
    int mode = 0;
    int arg2 = -1;

    switch (button)
    {
      case 1:
        SetCVar("samsara_cl_vanilladoom", !GetCVar("samsara_cl_vanilladoom"));
        mode = GetCVar("samsara_cl_vanilladoom");
        break;

      case 2:
        SetCVar("samsara_cl_wolfmove", !GetCVar("samsara_cl_wolfmove"));
        mode = GetCVar("samsara_cl_wolfmove");
        break;

      case 3:
        SetCVar("samsara_cl_ballgag", !GetCVar("samsara_cl_ballgag"));
        mode = GetCVar("samsara_cl_ballgag");
        break;

      case 4:
        SetCVar("samsara_cl_weaponhud", !GetCVar("samsara_cl_weaponhud"));
        mode = GetCVar("samsara_cl_weaponhud");
        break;

      case 5:
        SetCVar("samsara_cl_moremessages", !GetCVar("samsara_cl_moremessages"));
        mode = GetCVar("samsara_cl_moremessages");
        break;

      case 6:
        SetCVar("samsara_cl_printpickup", !GetCVar("samsara_cl_printpickup"));
        mode = GetCVar("samsara_cl_printpickup");
        break;

      case 7:
        SetCVar("samsara_cl_norecoil", !GetCVar("samsara_cl_norecoil"));
        mode = GetCVar("samsara_cl_norecoil");
        break;

      case 8:
        if (GetCVar("samsara_cl_heromusic") >= 2) { cvarsetting = 0; }
        else { cvarsetting = GetCVar("samsara_cl_heromusic") + 1; }

        SetCVar("samsara_cl_heromusic", cvarsetting);

        if (GetCVar("samsara_cl_heromusic") <= 0)
        {
            StopSound(0, CHAN_VOICE);
            LocalSetMusic("*");
        }

        // SamsaraOST_Enter should already be handled

        mode = GetCVar("samsara_cl_heromusic");
        break;

      case 9:
        if (GetCVar("samsara_cl_pickupmode") >= 2) { cvarsetting = 0; }
        else { cvarsetting = GetCVar("samsara_cl_pickupmode") + 1; }

        SetCVar("samsara_cl_pickupmode", cvarsetting);

        mode = GetCVar("samsara_cl_pickupmode");
        break;

      case 10:
        if (PlayerIsSpectator(pln) > 0) { break; }

        switch (samsaraClassNum())
        {
          case CLASS_DOOM:
            SetCVar("samsara_cl_doom64", !GetCVar("samsara_cl_doom64"));
            mode = GetCVar("samsara_cl_doom64");
            arg2 = CLASS_DOOM;
            break;

          case CLASS_WOLFEN:
            if (GetCVar("samsara_cl_wolfmode") >= 2) { cvarsetting = 0; }
            else { cvarsetting = GetCVar("samsara_cl_wolfmode") + 1; }

            SetCVar("samsara_cl_wolfmode", cvarsetting);
            mode = GetCVar("samsara_cl_wolfmode");
            arg2 = CLASS_WOLFEN;
            break;

          case CLASS_HEXEN:
            if (GetCVar("samsara_cl_hexclass") >= 2) { cvarsetting = 0; }
            else { cvarsetting = GetCVar("samsara_cl_hexclass") + 1; }

            SetCVar("samsara_cl_hexclass", cvarsetting);
            mode = GetCVar("samsara_cl_hexclass");
            arg2 = CLASS_HEXEN;
            break;

          case CLASS_DUKE:
            SetCVar("samsara_cl_dkclab", !GetCVar("samsara_cl_dkclab"));
            mode = GetCVar("samsara_cl_dkclab");
            arg2 = CLASS_DUKE;
            break;

          case CLASS_ROTT:
            if (GetCVar("samsara_cl_rottmode") >= 4) { cvarsetting = 0; }
            else { cvarsetting = GetCVar("samsara_cl_rottmode") + 1; }

            SetCVar("samsara_cl_rottmode", cvarsetting);
            mode = GetCVar("samsara_cl_rottmode");
            arg2 = CLASS_ROTT;
            break;

          case CLASS_BLAKE:
            SetCVar("samsara_cl_bsaog", !GetCVar("samsara_cl_bsaog"));
            mode = GetCVar("samsara_cl_bsaog");
            arg2 = CLASS_BLAKE;
            break;

          case CLASS_POGREED:
            if (GetCVar("samsara_cl_ipogmode") >= 4) { cvarsetting = 0; }
            else { cvarsetting = GetCVar("samsara_cl_ipogmode") + 1; }

            SetCVar("samsara_cl_ipogmode", cvarsetting);
            mode = GetCVar("samsara_cl_ipogmode");
            arg2 = CLASS_POGREED;
            break;

          case CLASS_HALFLIFE:
            SetCVar("samsara_cl_shephardmode", !GetCVar("samsara_cl_shephardmode"));

            if (CheckInventory("flashlightinventory")) { ACS_NamedExecuteWithResult("HL2677"); }

            mode = GetCVar("samsara_cl_shephardmode");
            arg2 = CLASS_HALFLIFE;
            break;

          default:
            break;
        }
        break;
    }

    ACS_NamedExecuteWithResult("Samsara_Keybinds_Messages", button, mode, arg2);
}

script "Samsara_Keybinds_Messages" (int button, int mode, int arg2) CLIENTSIDE
{
    int pln = PlayerNumber(); // ensure only the activator gets the messages
    int cpln = ConsolePlayerNumber();

    str modestring = "Default";

    switch (button)
    {
      case 1:
        if (mode >= 1) { modestring = "Vanilla"; }
        else { modestring = "Improved"; }

        if (pln == cpln)
        {
            SetCVar("samsara_cl_vanilladoom", mode);
            Log(s:"\cgDoom Animations & Balance: ", s:"\ck", s:modestring);
        }
        break;

      case 2:
        if (mode >= 1) { modestring = "On"; }
        else { modestring = "Off"; }

        if (pln == cpln)
        {
            SetCVar("samsara_cl_wolfmove", mode);
            Log(s:"\cgWolfenstein Style Movement: ", s:"\ck", s:modestring);
        }
        break;

      case 3:
        if (mode >= 1) { modestring = "Off"; }
        else { modestring = "On"; }

        if (pln == cpln)
        {
            SetCVar("samsara_cl_ballgag", mode);
            Log(s:"\cgCharacter Talk: ", s:"\ck", s:modestring);
        }
        break;

      case 4:
        if (mode >= 1) { modestring = "On"; }
        else { modestring = "Off"; }

        if (pln == cpln)
        {
            SetCVar("samsara_cl_weaponhud", mode);
            Log(s:"\cgWeapon HUD Bar: ", s:"\ck", s:modestring);
        }
        break;

      case 5:
        if (mode >= 1) { modestring = "On"; }
        else { modestring = "Off"; }

        if (pln == cpln)
        {
            SetCVar("samsara_cl_moremessages", mode);
            Log(s:"\cgExtra Pickup Messages: ", s:"\ck", s:modestring);
        }
        break;

      case 6:
        if (mode >= 1) { modestring = "Print"; }
        else { modestring = "Log"; }

        if (pln == cpln)
        {
            SetCVar("samsara_cl_printpickup", mode);
            Log(s:"\cgPickup Message Mode: ", s:"\ck", s:modestring);
        }
        break;

      case 7:
        if (mode >= 1) { modestring = "Off"; }
        else { modestring = "On"; }

        if (pln == cpln)
        {
            SetCVar("samsara_cl_norecoil", mode);
            Log(s:"\cgWeapon Recoil: ", s:"\ck", s:modestring);
        }
        break;

      case 8:
        if (mode >= 2) { modestring = "Game Override"; }
        else if (mode == 1) { modestring = "Class"; }
        else { modestring = "Off"; }

        if (pln == cpln)
        {
            SetCVar("samsara_cl_heromusic", mode);
            Log(s:"\cgHero Music: ", s:"\ck", s:modestring);
        }
        break;

      case 9:
        if (mode >= 2) { modestring = "Class"; }
        else if (mode == 1) { modestring = "Hybrid"; }
        else { modestring = "Old-Style"; }

        if (pln == cpln)
        {
            SetCVar("samsara_cl_pickupmode", mode);
            Log(s:"\cgPickup Graphics: ", s:"\ck", s:modestring);
        }
        break;

      case 10:
        if (PlayerIsSpectator(pln) > 0)
        {
            if (pln == cpln) { Log(s:"This cannot be used while spectating."); }
            terminate;
        }

        switch (arg2)
        {
          case CLASS_DOOM:
            if (mode >= 1) { modestring = "Doom 64 Guy"; }
            else { modestring = "Doomguy"; }

            if (pln == cpln)
            {
                SetCVar("samsara_cl_doom64", mode);
                Log(s:"\cgDoom Character: ", s:"\ck", s:modestring);
            }
            break;

          case CLASS_WOLFEN:
            if (mode >= 2) { modestring = "B.J. Blazkowicz (Castle Totenkopf SDL)"; }
            else if (mode == 1) { modestring = "B.J. Blazkowicz (Lost Missions)"; }
            else { modestring = "B.J. Blazkowicz (Original)"; }

            if (pln == cpln)
            {
                SetCVar("samsara_cl_wolfmode", mode);
                Log(s:"\cgWolfenstein 3D Character: ", s:"\ck", s:modestring);
            }
            break;

          case CLASS_HEXEN:
            if (mode >= 2) { modestring = "Baratus"; }
            else if (mode == 1) { modestring = "Daedolon"; }
            else { modestring = "Parias"; }

            if (pln == cpln)
            {
                SetCVar("samsara_cl_hexclass", mode);
                Log(s:"\cgHexen 1 Character: ", s:"\ck", s:modestring);
            }
            break;

          case CLASS_DUKE:
            if (mode >= 1) { modestring = "Life's a Beach"; }
            else { modestring = "Original"; }

            if (pln == cpln)
            {
                SetCVar("samsara_cl_dkclab", mode);
                Log(s:"\cgDuke Nukem 3D Skins: ", s:"\ck", s:modestring);
            }
            break;

          case CLASS_ROTT:
            if (mode >= 4) { modestring = "Doug Wendt"; }
            else if (mode == 3) { modestring = "Lorelei Ni"; }
            else if (mode == 2) { modestring = "Thi Barrett"; }
            else if (mode == 1) { modestring = "Taradino Cassatt"; }
            else { modestring = "Ian Paul Freeley"; }

            if (pln == cpln)
            {
                SetCVar("samsara_cl_rottmode", mode);
                Log(s:"\cgROTT: H.U.N.T. Team Member: ", s:"\ck", s:modestring);
            }
            break;

          case CLASS_BLAKE:
            if (mode >= 1) { modestring = "Aliens of Gold"; }
            else { modestring = "Planet Strike"; }

            if (pln == cpln)
            {
                SetCVar("samsara_cl_bsaog", mode);
                Log(s:"\cgBlake Stone Weapon Skins: ", s:"\ck", s:modestring);
            }
            break;

          case CLASS_POGREED:
            if (mode >= 4) { modestring = "Theola Nom"; }
            else if (mode == 3) { modestring = "Specimen 7"; }
            else if (mode == 2) { modestring = "Xith"; }
            else if (mode == 1) { modestring = "Tobias Locke"; }
            else { modestring = "Aldus Kaden"; }

            if (pln == cpln)
            {
                SetCVar("samsara_cl_ipogmode", mode);
                Log(s:"\cgIPOG: A.V.C. Team Member: ", s:"\ck", s:modestring);
            }
            break;

          case CLASS_HALFLIFE:
            if (mode >= 1) { modestring = "Adrian Shephard"; }
            else { modestring = "Gordon Freeman"; }

            if (pln == cpln)
            {
                SetCVar("samsara_cl_shephardmode", mode);
                Log(s:"\cgHalf-Life Character: ", s:"\ck", s:modestring);
            }
            break;

          default:
            if (pln == cpln) { Log(s:"This character has no alternative modes."); }
            terminate;
        }
        break;

      default:
        if (pln == cpln) { Log(s:"Invalid setting."); }
        terminate;
    }
}

//For our unique keys to be consolidated
Script "Samsara_UniqueKeys" (void) net
{
	int pln = PlayerNumber();
	switch(PlayerClass(pln))
	{
		case 10:
			if(GetCvar("samsara_permakimbo"))
			{
				if(CheckInventory("GunsAkimboP"))
					TakeInventory("GunsAkimboP",1);
				else
					GiveInventory("GunsAkimboP",1);
			}
			break;
		case 19:
			ACS_NamedExecuteWithResult("HL2677",0,0,0);
			break;
		case 23:
			if(((timer() > CheckInventory("LeonardPissTimer") + 10500) || CheckInventory("LeonardPissTimer") == 0) && GetActorProperty(0,APROP_Health) > 0)
			{
				TakeInventory("LeonardPissTimer",2147483647);
				GiveInventory("LeonardPissTimer",timer());
				if(GetActorProperty(0,APROP_Health) < 90)
					SetActorProperty(0,APROP_Health,GetActorProperty(0,APROP_Health)+2);
				else if(GetActorProperty(0,APROP_Health) < 100)
					SetActorProperty(0,APROP_Health,100);
					
				Playsound(0,"Leonard/Pee",CHAN_6,1.0,0,ATTN_NORM);
			}
			break;
		case 26:
			ACS_NamedExecuteWithResult("BondActivateWatch",0,0,0);
			break;
	}
}

//======================================================================================================================
//													Get Settings
//======================================================================================================================

script "SamsaraGetSettings" (void) net //676 -- SAMSARA_GETSETTINGS
{
    int lmsLevel = middle(0, GetCVar("samsara_lmslife"), LMSMODES-1);
    int lmsHP, lmsArmor;
    int lmsUlt, lmsUnique;
    int ultStay, highLow;

    if (lmsLevel) { lmsHP    = 100*lmsLevel; lmsArmor = 100*lmsLevel; }
    else { lmsHP = 100; lmsArmor = 0; }

    if (GetCVar("samsara_lmsunique")) { lmsUnique = "\cdwith"; }
    else { lmsUnique = "\cgwithout"; }

    if (GetCVar("samsara_lmsult")) { lmsUlt = "\cdwith"; }
    else { lmsUlt = "\cgwithout"; }

    if (GetCVar("samsara_permault")) { ultStay = "\cdstay"; }
    else { ultStay = "\cado not stay"; }

    if (GetCVar("samsara_jumpmod") < 0) { highLow = "\calower"; }
    else { highLow = "\cfhigher"; }

    SetHudSize(640, 480, 1);

    if (isLMS())
    {
        HudMessage(s:"Spawning with \ca", d:lmsHP, s:" health\c- and \cd", d:lmsArmor, s:" armor\c-";
            HUDMSG_FADEOUT, 6761, CR_WHITE, 50.1, 80.0, 3.0, 1.0);
        
        HudMessage(s:"You spawn ", s:lmsUnique, s:"\c- your unique and ", s:lmsUlt, s:"\c- your slot 7";
            HUDMSG_FADEOUT, 6762, CR_WHITE, 50.1, 104.0, 3.0, 1.0);
    }
    else
    {
        HudMessage(s:"Slot 7 pickups ", s:ultStay, s:"\c- on pickup";
            HUDMSG_FADEOUT, 6761, CR_WHITE, 50.1, 80.0, 3.0, 1.0);

        HudMessage(s:"Armor mode is \cf", s:ArmorModeNames[ArmorMode];
            HUDMSG_FADEOUT, 6762, CR_WHITE, 50.1, 96.0, 3.0, 1.0);
    }

    if (GetCVar("samsara_jumpmod"))
    {
        HudMessage(s:"You jump \cn", d:abs(GetCVar("samsara_jumpmod")), s:"\c- units ", s:highLow, s:"\c- than normal";
                HUDMSG_FADEOUT, 6763, CR_WHITE, 50.1, 112.0, 3.0, 1.0);
    }
    else
    {
        HudMessage(s:"Jumping is \cbnormal";
                HUDMSG_FADEOUT, 6763, CR_WHITE, 50.1, 112.0, 3.0, 1.0);
    }


    if (GetCVar("samsara_banjetpack"))
    {
        HudMessage(s:"Duke's Jetpack, Rebel Moon Commando's jetpack, Freeman's longjump, and Adrian's barnacle are \cgBANNED.";
                HUDMSG_FADEOUT, 6764, CR_WHITE, 50.1, 128.0, 3.0, 1.0);
    }
    else
    {
        HudMessage(s:"Duke's Jetpack, Rebel Moon Commando's jetpack, Freeman's longjump, and Adrian's barnacle are \cdALLOWED.";
                HUDMSG_FADEOUT, 6764, CR_WHITE, 50.1, 128.0, 3.0, 1.0);
    }

    if (GetCVar("samsara_banwolfmove"))
    {
        HudMessage(s:"Wolfenstein movement is \cgBANNED.";
                HUDMSG_FADEOUT, 6765, CR_WHITE, 50.1, 144.0, 3.0, 1.0);
    }
    else
    {
        HudMessage(s:"Wolfenstein movement is \cdALLOWED.";
                HUDMSG_FADEOUT, 6765, CR_WHITE, 50.1, 144.0, 3.0, 1.0);
    }

    if (GetCVar("samsara_nocustomgravity"))
    {
        HudMessage(s:"Custom gravities are \cadisabled.";
                HUDMSG_FADEOUT, 6766, CR_WHITE, 50.1, 160.0, 3.0, 1.0);
    }
    else
    {
        HudMessage(s:"Custom gravities are \cdenabled.";
                HUDMSG_FADEOUT, 6766, CR_WHITE, 50.1, 160.0, 3.0, 1.0);
    }

    HudMessage(s:"Party mode is ", s:cond(GetCVar("samsara_peoplediewhentheyarekilled"), "\cdON.", "\caOFF."), s:"\c- (", d:GetCVar("samsara_peoplediewhentheyarekilled"), s:")";
            HUDMSG_FADEOUT, 6767, CR_WHITE, 50.1, 176.0, 3.0, 1.0);

    HudMessage(s:"Limitless health is ", s:cond(GetCVar("samsara_nohealthcap"), "\cdON.", "\caOFF.");
            HUDMSG_FADEOUT, 6769, CR_WHITE, 50.1, 208.0, 3.0, 1.0);

    HudMessage(s:"Chainsaw/unique start: \ca", d:GetCVar("samsara_chainsawstart"), s:"\c- / \cn", d:GetCvar("samsara_uniquestart");
            HUDMSG_FADEOUT, 6770, CR_WHITE, 50.1, 224.0, 3.0, 1.0);
}

//======================================================================================================================
//													Key Share
//======================================================================================================================

int keys[3][26] = {{0},
    {"RedCard", "YellowCard", "BlueCard", "RedSkull", "YellowSkull", "BlueSkull", "KeyBlue", "KeyGreen", "KeyYellow", "ChexRedCard", "ChexYellowCard", "ChexBlueCard", "RedFlemKey", "YellowFlemKey", "BlueFlemKey", "KeyAxe", "KeyCastle", "KeyCave", "KeyDungeon", "KeyEmerald", "KeyFire", "KeyHorn", "KeyRusted", "KeySilver", "KeySteel", "KeySwamp"},
{"\cgRed Keycard", "\ckYellow Keycard", "\chBlue Keycard", "\cgRed Skull", "\ckYellow Skull", "\chBlue Skull", "\chBlue Prism Key", "\cqGreen Prism Key", "\ckYellow Prism Key", "\cgRed Card", "\ckYellow Card", "\chBlue Card", "\cgRed Flem Key", "\ckYellow Flem Key", "\chBlue Flem Key", "\cuAxe Key", "\cfCastle Key", "\csCave Key", "\cuDungeon Key", "\cdEmerald Key", "\cgFire Key", "\ceHorn Key", "\cbRusted Key", "\cuSilver Key", "\cmSteel Key", "\cpSwamp Key"}};
//0, 1, 2: Doom R/Y/B Keycard. - \cg, \ck, \ch
//3, 4, 5: Doom R/Y/B Skull. - \cg, \ck, \ch
//6, 7, 8: Heretic B/G/Y Prism Key. - \ch, \cq, \ck
//9, 10, 11: Chex Quest R/Y/B Keycard. - \cg, \ck, \ch
//12, 13, 14: Chex Quest R/Y/B Flem Key. - \cg, \ck, \ch
//15: Axe Key - \cu (Grey)
//16: Castle Key - \cf (Gold)
//17: Cave Key - \cs (Brown)
//18: Dungeon Key - \cu (Grey)
//19: Emerald Key - \cd (Light Green)
//20: Fire Key - \cg (Red)
//21: Horn Key - \ce (Beige)
//22: Rusted Key - \cb (Very light off-white)
//23: Silver Key - \cu (Grey)
//24: Steel Key - \cm (Black)
//25: Swamp Key - \cp (Drab green-brown)

////////////////////
// SHARED KEYS
// (by Synert)
/////////////////

// Give keys as needed, for people joining the game.

script "SamsaraKeyShare" ENTER //901
{
    if (!(IsSinglePlayer() || IsCoop())) { terminate; }

    while (1)
    {
        for (int a = 0; a < 26; a++)
        {
            if (keys[0][a] == 1)
            {
                GiveInventory(keys[1][a], 1);
            }
        }
        delay(10);
    }
}

script "SamsaraKeyBroadcast" (int a) { // Picked up a key, broadcast that shit to the whole world! --902
    if(keys[0][a] == 0 && isCoop() && !isSinglePlayer()) {
        Log(n:0,s:"\c* has picked up the ",s:keys[2][a],s:"\c*."); // Let the server admins know.
        HudMessageBold(n:0,s:"\c* has picked up the ",s:keys[2][a],s:"\c*.";HUDMSG_FADEOUT, 900, CR_GOLD, 0.5, 0.1, 3.0, 0.5);
    }
    keys[0][a] = 1;
	
	if(CheckInventory("HalfLifeClass") && GetCvar("samsara_cl_heromusic"))
		ACS_NamedExecuteAlways("SamsaraOST_HalfLifeScriptedMusic", 0, 1, 0, 0);
}

//======================================================================================================================
//													Kill Count
//======================================================================================================================

//Replace this script and inject code into it for other tcs when actors die. Override 1 is for base samsara monsters. Override 2 is shrunk actors to get their parent.
Script "Samsara_KillCount" (int override)
{
	if(!(ClassifyActor(0) & ACTOR_MONSTER))
		terminate;
		
	int HasXDeath; 
	int isBoss = CheckFlag(0,"BOSS");
	
	if(GetTimeProperty(0, 5, true) == 0) // TM_YEAR = 5
		HasXDeath = CheckActorState(0,"XDeath",1);
	else
		HasXDeath = 1;
		
	if(SpawnForced("StrongHoldLoaded",0,0,0,0))
		ACS_NamedExecuteWithResult("Stronghold_KillCount",0,0,0,0);	
		
	int noblood = CheckFlag(0,"NOBLOOD");
	int health;
	int currentHealth = GetActorProperty(0, APROP_Health);	
	int healthtokens = CheckInventory("ShrunkMasterHealthTokens");

	if(healthtokens == 0)
		health = GetActorProperty(0, APROP_SpawnHealth);	
	else
		health = healthtokens;
	
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	
	//eww
	if(ThingCountName("SamsaraMixerCompendiumToken",0) > 0)
	{
		if(!GetCvar("samsara_merrychristmas"))
			ACS_NamedExecuteAlways("Samsara_PinataHandler",0,health,GetActorProperty(0,APROP_Radius)>>16,GetActorProperty(0,APROP_Height)>>16);
		else
		{
			int presentTid = UniqueTid();
			int presentScale = 0.25 + ((health >= 200) * 0.175) + ((health >= 1000) * 0.175) + ((health >= 2500) * 0.175) + ((health >= 5000) * 0.175);
			SpawnForced("XmasGift",x,y,z,presentTid);
			ThrustThing(random(0,256),random(1,2),0,presentTid);
			ThrustThingZ(presentTid,random(4,8),0,0);
			SetActorProperty(presentTid,APROP_Health,health);
			SetActorProperty(presentTid,APROP_Accuracy,GetActorProperty(0,APROP_Radius)>>16);
			SetActorProperty(presentTid,APROP_Score,GetActorProperty(0,APROP_Height)>>16);
			SetActorProperty(presentTid,APROP_ScaleX,presentScale);
			SetActorProperty(presentTid,APROP_ScaleY,presentScale);
			Thing_ChangeTid(presentTid,0);
		}
	}
	
	SetActivatorToTarget(0);
	
	if(override != 1)
		GiveInventory("KillCount", 1);
		
	if(CheckInventory("Hexen2Class"))
	{
		int chance = (0.05+((CheckInventory("Hexen2Level")-4)*0.03));
		if(chance > 0.2)
			chance = 0.2;
					
		GiveInventory("Hexen2Experience", FixedMul((health*2.5)>>16,(1.0+(0.05*CheckInventory("Hexen2Wisdom"))))*(1+(PlayerCount()/4)));
		if(random(0.0,1.0) <= chance && !noblood)
			SpawnForced("Hexen2SoulSphere",x,y,z,0,0);
	}
	
	if(CheckInventory("WitchavenClass"))
		GiveInventory("WTExperience", health*(1+(PlayerCount()/4)));	
	
	if(CheckInventory("StrifeClass") && !CheckInventory("BlackBirdTauntCooldown"))
	{
		if(isBoss)
			GiveInventory("BlackBirdBossKill",1);
		else if(HasXDeath && currentHealth < -health && random(0,20) <= 3)
		{
			GiveInventory("BlackBirdXDeath",1);
		}
	}
}

//======================================================================================================================
//													Bot Alt Class
//======================================================================================================================

Script "Samsara_BotAltClassHandler" (int playernum)
{
	str playername;
	switch(PlayerClass(playernum))
	{
		case 0:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Doom 64 Guy") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_doom64",1);
			}
			break;
		case 3:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"B.J. Blazkowicz (Lost)") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_wolfmode",1);
			}
			if(StrCmp(playername,"B.J. Blazkowicz (Totenkopf)") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_wolfmode",2);
			}
			break;
		case 4:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Daedolon") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_hexclass",1);
			}
			if(StrCmp(playername,"Baratus") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_hexclass",2);
			}
			break;
		case 5:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-5);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Duke Nukem (Beach)") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_dkclab",1);
			}
			break;
		case 8:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-8);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Taradino Cassatt") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_rottmode",1);
			}
			if(StrCmp(playername,"Thi Barrett") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_rottmode",2);
			}
			if(StrCmp(playername,"Lorelei Ni") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_rottmode",3);
			}
			if(StrCmp(playername,"Doug Wendt") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_rottmode",4);
			}
			break;
		case 9:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Blake Stone (Planet Strike)") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_bsaog",1);
			}
			break;
		case 16:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Tobias Locke") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_ipogmode",1);
			}
			if(StrCmp(playername,"Xith") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_ipogmode",2);
			}
			if(StrCmp(playername,"Specimen 7") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_ipogmode",3);
			}
			if(StrCmp(playername,"Theola Nom") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_ipogmode",4);
			}
			break;
		case 19:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Shephard") == 0)
			{	
				SetUserCvar(playernum,"samsara_cl_shephardmode",1);
			}
			break;
		case 27:
			while(GetActorProperty(0,APROP_Health) > 0)
			{
				int randomweapon = random(0,5);
				switch(randomweapon)
				{
					case 0:
						SetWeapon("Catacomb_WavesQuickSpell");
						break;
					case 1:
						SetWeapon("Catacomb_XTerminatorsQuickSpell");
						break;
					case 2:
						SetWeapon("Catacomb_BurstsQuickSpell");
						break;
					case 3:
						SetWeapon("Catacomb_ZappersQuickSpell");
						break;
					case 4:
						SetWeapon("Catacomb_NukesQuickSpell");
						break;
					case 5:
						SetWeapon("Catacomb_BoltsQuickSpell");
						break;
				}
				Delay(17);
			}
			break;
	}
}

//======================================================================================================================
//													Lasers
//======================================================================================================================

Script "Samsara_Laser" (int type, int space, int height) clientside
{
	int t, i, k = 0, l, angle, pitch, x, y, z, tx, ty, tz, vx, vy, vz, mag, magI, horz;
	str segment;
	switch(type)
	{
		case 1:
			segment = "Hexen2ForceCubeMissileSegment1";
			break;
		case 2:
			segment = "Hexen2ForceCubeMissileSegment2";
			break;
		case 3:
			segment = "Hexen2ForceCubeMissileSegment3";
			break;
		case 4:
			segment = "Hexen2ForceCubeMissileSegment4";
			break;
		case 5:
			segment = "Hexen2ForceCubeMissileSegment5";
			break;
		case 6:
			i = space;
			segment = "Hexen2TempestStaffPoweredLightningSegment";	
			break;
		case 7:
			segment = "Hexen2FamineBeamSegment";
			break;
		case 8:
			segment = "TentacleProjectileSegment";
			break;
		case 9:
			horz = -11;
			i = 28;
			segment = "LaserProjectileSegment";
			break;
		case 10:
			horz = -2;
			i = 16;
			segment = "LaserProjectileSegment";
			break;
		case 11:
			horz = 2;
			i = 16;
			segment = "LaserProjectileSegment";
			break;
		case 12:
			i = 16;
			segment = "TentacleProjectileSegment";
			break;
		case 13:
			horz = 24;
			i = 64;
			segment = "WidowBeamProjectileSegment";
			break;
		case 14:
			i = space;
			segment = "LGBeam";
			break;
		case 15:
			segment = "Hexen2MedusaGazeSegment1";
			break;			
	}
	

	int newtid = UniqueTid();

	tx = GetActorX(0); ty = GetActorY(0); tz = GetActorZ(0);
	
	SetActivatorToTarget(0);	
	
	int xoff = sin(GetActorAngle(0)) * horz;
	int yoff = cos(GetActorAngle(0)) * horz;
		
    x = GetActorX(0) + xoff;
	y = GetActorY(0) + yoff;
	z = GetActorZ(0) + height*1.0;
	
	int vectorx = tx - x;
	int vectory = ty - y;
	int vectorz = tz - z;
	angle = VectorAngle(vectorx, vectory);
	
	int length = magnitudeTwo(vectorx>>16,vectory>>16);
	pitch = VectorAngle(length<<16, vectorz);

    vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
    vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
    magI = ftoi(mag);
    for (i = i; i < magI; i += space)
    {
        SpawnForced(segment, x+(vx*i), y+(vy*i), z+(vz*i), newtid);
		SetActorPitch(newtid, pitch);
		SetActorAngle(newtid, angle);
		if(i % 1500 == 0)
			Delay(1);
    }
}

//======================================================================================================================
//													Inventory Reset
//======================================================================================================================

Script "Samsara_ResetInventory" (void)
{
	int pln = PlayerNumber();
	ClearInventory();
	//GiveInventory("Clip", 50);
	TakeInventory("GotWeapon0", 999);
	TakeInventory("GotWeapon1", 999);
	TakeInventory("GotWeapon2", 999);
	TakeInventory("GotWeapon3", 999);
	TakeInventory("GotWeapon4", 999);
	TakeInventory("GotWeapon5", 999);
	TakeInventory("GotWeapon6", 999);
	TakeInventory("GotWeapon7", 999);
	TakeInventory("KillCountBar", 999);
	TakeInventory("AllyCellPhone", 999);
	switch(PlayerClass(pln))
	{
		case 0:
			TakeInventory(" Chainsaw ", 999);
			TakeInventory(" Shotgun ", 999);
			TakeInventory("Super Shotgun", 999);
			TakeInventory(" Chaingun ", 999);
			TakeInventory("Rocket Launcher", 999);
			TakeInventory("Plasma Rifle", 999);
			TakeInventory("B.F.G. 9000", 999);
			TakeInventory(" Minigun ", 999);
			TakeInventory( " GrenadeLauncher ", 999);
			TakeInventory(" RailGun ", 999);
			TakeInventory(" BFG10K ", 999);
			TakeInventory("DGHasChaingun", 999);
			TakeInventory("DGHasMinigun", 999);
			TakeInventory("DGHasRocketLauncher", 999);
			TakeInventory("DGHasGrenadeLauncher", 999);
			TakeInventory("DGHasPlasmaRifle", 999);
			TakeInventory("DGHasRailGun", 999);
			TakeInventory("DGHasBFG9000", 999);
			TakeInventory("DGHasBFG10K", 999);
			TakeInventory("Doom64_IHaveUnmaker", 999);
			TakeInventory("Doom64UnmakerArtifact", 999);
			
			GiveInventory(" Pistol ", 1);
			GiveInventory(" Fist ", 1);
			GiveInventory("DoomguyClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon(" Pistol ");
			break;
		case 1:
			TakeInventory("Super Bootspork", 999);
			TakeInventory("Large Zorcher", 999);
			TakeInventory("Super Large Zorcher", 999);
			TakeInventory("Rapid Zorcher", 999);
			TakeInventory("Zorch Propulsor", 999);
			TakeInventory("Phasing Zorcher", 999);
			TakeInventory("LAZ Device", 999);
			TakeInventory("Gigazorcher 2100", 999);
			
			GiveInventory("Mini-Zorcher", 1);
			GiveInventory(" Bootspoon ", 1);
			GiveInventory("ChexClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("Mini-Zorcher");
			break;
		case 2:
			TakeInventory("Gauntlets of the Necromancer", 999);
			TakeInventory("Dragon Claw", 999);
			TakeInventory("Grim Ballista", 999);
			TakeInventory("PermaRemoteBomb", 999);
			TakeInventory("PermaTimeBomb", 999);
			TakeInventory("PortQuartzFlask", 999);
			TakeInventory("PortSuperHealth", 999);
			TakeInventory("CorvusMegasphere", 999);
			TakeInventory("PortGhostly", 999);
			TakeInventory("PortRingInvuln", 999);
			TakeInventory("PortTorch", 999);
			TakeInventory("PortTome", 999);
			
			GiveInventory("Elven Wand", 1);
			GiveInventory(" Staff ", 1);
			GiveInventory("CorvusClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("PermaRemoteBomb", 1);
			GiveInventory("PermaTimeBomb", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("Elven Wand");
			break;
		case 3:
			TakeInventory("BJSuperKnife", 999);
			TakeInventory("Totenkopf_PistolDual", 999);
			TakeInventory("Totenkopf_Mauser", 999);
			TakeInventory("Totenkopf_MauserDual", 999);
			TakeInventory("Machine Gun", 999);
			TakeInventory("Totenkopf_STG44", 999);
			TakeInventory("  Chaingun  ", 999);
			TakeInventory("Totenkopf_MP40Dual", 999);
			TakeInventory("Spear of Destiny", 999);
			TakeInventory("Mauser Rifle", 999);
			TakeInventory("WolfExtraLife", 999);
			TakeInventory("TotenkopfHealingOrbHealer", 999);
			TakeInventory("TotenkopfHasHealingOrb", 999);
			TakeInventory("TotenkopfPowerArmorPickup", 999);
			TakeInventory("TotenkopfHasPowerArmor", 999);
			
			GiveInventory("Luger", 1);
			GiveInventory("Knife", 1);
			GiveInventory("WolfenClass", 1);
			GiveInventory("CanWolfMovement", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("Luger");
			break;
		case 4:
			TakeInventory("PortFlechette", 999);
			TakeInventory("PortQuartzFlask2", 999);
			TakeInventory("PortSuperHealth2", 999);
			TakeInventory("PortMysticAmbit", 999);
			TakeInventory("Serpent Staff", 999);
			TakeInventory("Bloodscourge", 999);
			TakeInventory("Hammer of Retribution", 999);
			TakeInventory("Frost Shards", 999);
			TakeInventory("Timon's Axe", 999);
			TakeInventory("PortGhostly2", 999);
			TakeInventory("PortIconDefender", 999);
			TakeInventory("PortTorch2", 999);
			TakeInventory("PortKraterOfMight", 999);
				
			GiveInventory("Sapphire Wand", 1);
			GiveInventory("Mace of Contrition", 1);
			GiveInventory("HexenClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("Sapphire Wand");
			break;
		case 5:
			TakeInventory("Pipebombs", 999);
			TakeInventory("Chaingun Cannon", 999);
			TakeInventory("Golden Desert Eagle", 999);
			TakeInventory("DukePortJetpack", 999);
			TakeInventory("DukePetjack", 999);
			TakeInventory("DukeBootserk", 999);
			TakeInventory("DukePortNiVi", 999);
			TakeInventory("DukeNightVision", 999);
			TakeInventory("  Shotgun  ", 999);
			TakeInventory("Explosive Shotgun", 999);
			TakeInventory("Chaingun Cannon", 999);
			TakeInventory("RPG", 999);
			TakeInventory("Freezethrower", 999);
			TakeInventory("Devastator", 999);
			
			GiveInventory("Glock 17", 1);
			GiveInventory("Mighty Boot", 1);
			GiveInventory("DukeClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("Glock 17");
			
			if (!CheckInventory("DukeBallgag"))
			{
				LocalAmbientSound("duke/mpdeath",127);
				GiveInventory("DukeTauntCooldown",5);
				ACS_NamedExecuteAlways("DukeTauntCooldown",0,0);
			}
			break;
		case 6:
			TakeInventory("KKV-7 SMG Flechette", 999);
			TakeInventory("MA-75B Assault Rifle", 999);
			TakeInventory("SPNKR-25 Auto Cannon", 999);
			TakeInventory("CanDualPistols", 999);
			TakeInventory("CanDualShotties", 999);
			TakeInventory("WSTE-M5 Combat Shotgun", 999);
			TakeInventory("Fusion Pistol", 999);
			TakeInventory("SPNKR-XP SSM Launcher", 999);
			TakeInventory("TOZT-7 Napalm Unit", 999);
			TakeInventory("ONI-71 Wave Motion Cannon", 999);
			TakeInventory("Alien Weapon", 999);
			TakeInventory(" Alien Weapon ", 999);
			TakeInventory(".44 Magnum Mega Class A1", 999);
			
			GiveInventory(".44 Magnum Mega Class A1", 1);
			GiveInventory("Steel Knuckles", 1);
			GiveInventory("RocketAmmo", 10);
			GiveInventory("Shell", 20);
			GiveInventory("Cell", 50);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("MarathonClass", 1);
			GiveInventory("MagnumBullet", 8);
			GiveInventory("MagnumBulletRight", 8);
            GiveInventory("WastemShell", 2);
            GiveInventory("WastemShellRight", 2);
			GiveInventory("RifleBullet", 52);
			GiveInventory("SmgBullet", 32);
			GiveInventory("FusionBullet", 20);
			GiveInventory("GrenadeInClip", 7);
			GiveInventory("WMCAmmo", 8);
			GiveInventory("MortarAmmo", 3);
			GiveInventory("NapalmInTank", 210);
			GiveInventory("SpankerAmmo", 2);
			GiveInventory("KnifeAmmo", 2);
			GiveInventory("TauntButton", 1);
			SetWeapon(".44 Magnum Mega Class A1");
			break;
		case 7:
			TakeInventory("Laser Cannon", 999);
			TakeInventory("Nailgun", 999);
			TakeInventory("QuadDamageItem", 999);
			TakeInventory("Thunderbolt", 999);
			TakeInventory("Rocket Powered Impaler", 999);
			TakeInventory("Double Shotgun", 999);
			TakeInventory("Grenade Launcher", 999);
			TakeInventory("  Rocket Launcher  ", 999);
			TakeInventory("Super Nailgun", 999);	
			TakeInventory("Clip", 50);
			
			GiveInventory("QuakeClass", 1);
			GiveInventory("Single Shotgun", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			GiveInventory("Shell", 25);
			GiveInventory("Axe", 1);
			SetWeapon("Single Shotgun");
			break;
		case 8:
			TakeInventory("HeatSeeker", 999);
			TakeInventory("Double Pistols", 999);
			TakeInventory("Bazooka", 999);
			TakeInventory("MP40", 999);
			TakeInventory("Firebomb", 999);
			TakeInventory("DrunkMissiles", 999);
			TakeInventory("FlameWall", 999);
			TakeInventory("Split Missile", 999);
			TakeInventory("Excalibat", 999);
			TakeInventory("DarkStaff", 999);
			TakeInventory("God Hand", 999);
			TakeInventory("Doggie", 999);
			TakeInventory("Clip", 50);
			
			GiveInventory("RottClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("RPistol", 1);
			GiveInventory("RottKnife", 1);
			GiveInventory("DisplayMenu", 1);
			GiveInventory("PlayMusic", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("RPistol");
			break;
		case 9:
			TakeInventory("BlakeRefill", 999);
			TakeInventory("BlakeSuperAutoCharge", 999);
			TakeInventory("Slow Fire Protector", 999);
			TakeInventory("Rapid Assault Rifle", 999);
			TakeInventory("Dual Neutron Disruptor", 999);
			TakeInventory("Plasma Discharge Unit", 999);
			TakeInventory("Gatling Fusion Devastator", 999);
			TakeInventory("Anti-Plasma Cannon", 999);
			TakeInventory("BlakeShield", 999);
			TakeInventory("Advanced Auto Charge Pistol", 999);
			
			GiveInventory("BlakeClass", 1);
			GiveInventory("Auto Charge Pistol", 1);
			GiveInventory("CanWolfMovement", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("Auto Charge Pistol");
			break;
		case 10:
			TakeInventory("Dynamite", 999);
			TakeInventory("Flaregun", 999);
			TakeInventory("Sawedoff", 999);
			TakeInventory("Tommygun", 999);
			TakeInventory("NapalmLauncher", 999);
			TakeInventory("TeslaCannon", 999);
			TakeInventory("LifeLeech", 999);
			TakeInventory("GunsAkimboP", 999);
			TakeInventory("GunsAkimboItem", 999);
			TakeInventory("VoodooDoll", 999);
			TakeInventory("SprayCan", 999);
			TakeInventory("Flaregun2", 999);

			GiveInventory("CalebClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			GiveInventory("   Revolver   ", 1);
			GiveInventory("Pitchfork", 1);
			SetWeapon("   Revolver   ");
			break;
		case 11:
			TakeInventory(" Sigil ", 999);
			TakeInventory("StrifeSigilPiece", 999);
			TakeInventory("StrifeBeaconItem5", 999);
			TakeInventory("  Crossbow  ", 999);
			TakeInventory("Mini Missile Launcher", 999);
			TakeInventory("Assault Gun", 999);
			TakeInventory(" Grenade Launcher ", 999);
			TakeInventory("Flame Thrower", 999);
			TakeInventory(" Mauler ", 999);
			TakeInventory("  Sigil  ", 999);
			TakeInventory("StrifeSigilPiecePreferred",999);
			TakeInventory("StrifePortMedikit",999);
			TakeInventory("StrifeStimpack2",999);
			TakeInventory("StrifeSurgeryKit2",999);
			TakeInventory("PortShadowArmor",999);
			TakeInventory("PortEnviSuit",999);
			TakeInventory("StrifeguyStartingUpgradesHasBeenGiven", 999);
			
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			GiveInventory("StrifeClass", 1);
			GiveInventory("Punch Dagger", 1);
			GiveInventory("   Pistol   ", 1);
			SetWeapon("   Pistol   ");	
			break;
		case 12:
			TakeInventory(" Arachnicator ", 999);
			TakeInventory("  Sonic Shock  ", 999);
			TakeInventory("Pellet Bomb", 999);
			TakeInventory("  Dart Cannon  ", 999);
			TakeInventory("    Missile Launcher    ", 999);
			TakeInventory("Napalm Charge", 999);
			TakeInventory(" Plasma Ball ", 999);
			TakeInventory(" Eradicator Enhancement Chip ", 999);
			TakeInventory(" EvilBuddy ", 999);
			
			GiveInventory("EradClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			GiveInventory("  Claw  ", 1);
			GiveInventory("  Ripper Disc  ", 1);
			SetWeapon("  Ripper Disc  ");
			break;
		case 13:
			TakeInventory("M24CAW", 999);
			TakeInventory("M343Vulcan", 999);
			TakeInventory("AssaultShotgun", 999);
			TakeInventory("AlienDualBlaster", 999);
			TakeInventory("AlienPlasmaRifle", 999);
			TakeInventory("AlienAssaultCannon", 999);
			TakeInventory("AlienDisintegrator", 999);
			TakeInventory("SuperVulcan", 999);

			GiveInventory("Taser", 1);
			GiveInventory("CanWolfMovement", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			GiveInventory("C7Class", 1);
			SetWeapon("Taser");
			break;
		case 14:
			TakeInventory("DirtShark", 999);
			TakeInventory("ACR Combat Laser", 999);
			TakeInventory("ACR ADD-ON", 999);
			TakeInventory("Cyclops Particle Accelerator", 999);
			TakeInventory("RMR Grenade Launcher", 999);
			TakeInventory("RMR Railgun", 999);
			TakeInventory(" RMR Plasma Cannon ", 999);
			TakeInventory("Subestron Arm", 999);
			TakeInventory("Estron Ball", 999);
			TakeInventory("RMROxygenRecycler", 999);
			TakeInventory("RMRJetPack", 999);
			
			GiveInventory(" Laser Pistol ", 1);
			GiveInventory("RMRClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon(" Laser Pistol ");
			break;
		case 15:
			TakeInventory("Thermal Detonator", 999);
			TakeInventory("Stormtrooper Rifle", 999);
			TakeInventory("Fusion Cutter", 999);
			TakeInventory("Imperial Repeater", 999);
			TakeInventory("Mortar Gun", 999);
			TakeInventory("Concussion Rifle", 999);
			TakeInventory("Assault Cannon", 999);
			TakeInventory("DFSuperCharge", 999);
			TakeInventory("Stun Gauntlets", 999);
			TakeInventory("Czerka Adventurer", 999);
			
			GiveInventory("  Fist_2x5  ", 1);
			GiveInventory("Bryar Pistol", 1);
			GiveInventory("KatarnStarterShield",1);
			GiveInventory("KatarnClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);			
			SetWeapon("Bryar Pistol");	
			break;
		case 16:
			TakeInventory(" Toxic Mutant Gun ", 999);
			TakeInventory(" Plasma Shotgun ", 999);
			TakeInventory(" Aldus Flamethrower ", 999);
			TakeInventory(" Fast Chaingun ", 999);
			TakeInventory(" Fast Rocket Launcher ", 999);
			TakeInventory(" Laser Cannon ", 999);
			TakeInventory(" Super Plasma Annihilator ", 999);
			TakeInventory(" Lizard Crossbow ", 999);
			TakeInventory("PGSuperTazer", 999);
			TakeInventory("PGUltraTazer", 999);
			TakeInventory("IPOGGrenadeItem", 999);
			TakeInventory("IPOGTimeBombItem", 999);
			TakeInventory("IPOGProximityMineItem", 999);
			TakeInventory("IPOGCloneItem", 999);
			
			GiveInventory("POGreedClass", 1);
			GiveInventory(" Tazer ", 1);
			GiveInventory(" Aldus Pistol ", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon(" Aldus Pistol ");
			break;
		case 17:
			TakeInventory(" 18mm Auto ", 999);
			TakeInventory(" Phase Rifle ", 999);
			TakeInventory(" AM Blaster ", 999);
			TakeInventory("Phase Repeater", 999);
			TakeInventory(" Lock-on Cannon ", 999);
			TakeInventory(" AM Cyclone ", 999);
			TakeInventory(" Disruptor Zodiac ", 999);
			TakeInventory(" Disruptor Plasmalance ", 999);
			TakeInventory("DisruptorPSIEnergy", 999);
			TakeInventory("DisruptorPSICooldown", 999);
			TakeInventory("DisruptorEnergyBall", 999);
			TakeInventory("DisruptorTeraBall", 999);
		
			GiveInventory(" 18mm Semi ", 1);
			GiveInventory("Disruptor Fist", 1);
			GiveInventory("DisruptorClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("DisruptorDrain", 1);
			GiveInventory("DisruptorHealPSI", 1);
			GiveInventory("DisruptorPSIEnergy", 10);
			GiveInventory("TauntButton", 1);
			SetWeapon(" 18mm Semi ");
			break;
		case 18:
			TakeInventory("WTShieldTrigger", 999);
			TakeInventory("WTShieldUsed", 999);
			TakeInventory("WTWeaponActive", 999);
			TakeInventory("WTShieldDisable", 999);
			TakeInventory("WTShieldCounter", 999);
			TakeInventory("WTSpellCounter", 999);
			TakeInventory("WTCastingSpell", 999);
			TakeInventory("WTHalberdHold", 999);
			TakeInventory("WTBowUpgrade", 999);
			TakeInventory("WTSwordUpgrade", 999);
			TakeInventory("WTFistActive", 999);
			TakeInventory("WTFistAttack", 999);
			TakeInventory("Pike Axe", 999);
			TakeInventory("Battle Axe", 999);
			TakeInventory("Ice Halberd", 999);
			TakeInventory("Fire Mace", 999);
			TakeInventory("Frozen Two-Hand Sword", 999);
			TakeInventory("Spellbook", 999);
			TakeInventory("WTHealthPhial", 999);
			TakeInventory("WTInvisibilityPhial", 999);
			TakeInventory("WTFireProofPhial", 999);
			TakeInventory("WTLevel", 999);
			TakeInventory("WTExperience", 999999);
			
			GiveInventory("Bow and Arrows", 1);
			GiveInventory("Witchaven_Dagger", 1);
			GiveInventory("WitchavenClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("GrondovalStarterArmor", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("Bow and Arrows");
			break;
		case 19:
			TakeInventory("HalfLifeMusicPlayingToken", 1);
			TakeInventory("HalfLifeOpposingForceSet", 1);
			TakeInventory("HLHEVIsTalking", 1);
			TakeInventory("HLHEVPickupID", 1);
			TakeInventory("HLHEVDamageType", 1);
			TakeInventory("HLSpeedTokens", 1);
			TakeInventory("Hornetgun", 1);
			TakeInventory("Assault Shotgun", 1);
			TakeInventory(".357 Python", 1);
			TakeInventory("MP5", 1);
			TakeInventory(" RPG ", 1);
			TakeInventory("laserdeactive", 1);
			TakeInventory("Gauss Cannon", 1);
			TakeInventory("E.G.O.N.", 1);
			TakeInventory("HL Squeaks", 1);
			TakeInventory("HL Crossbow", 1);
			TakeInventory("HLOPHasBarnacleLongJump", 1);
			TakeInventory("HLOPBarnacleKillTether", 1);
			TakeInventory("HLOPBarnacleReleaseTether", 1);
			TakeInventory("HLOPBarnacleLatchedTether", 1);
			TakeInventory("HLOPBarnacle", 1);
			
			GiveInventory("9mm Pistol", 1);
			GiveInventory("Crowbar", 1);
			GiveInventory("HalfLifeClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			GiveInventory("Clip", 30);
			GiveInventory("Shell", 15);
			GiveInventory("RocketAmmo", 5);	
			GiveInventory("FlashLightAmmo", 4200);
            SetInventory("SamsaraFlashLightAmmoDisplay", CheckInventory("FlashLightAmmo") / 35);
			GiveInventory("HLPythonCounter", 6);
			GiveInventory("HLDeagleCounter", 7);
			GiveInventory("HLShotgunCounter", 8);
			GiveInventory("HLmp5Counter", 50);
			GiveInventory("HL9mmCounter", 17);
			GiveInventory("HLRPGCounter", 1);
			GiveInventory("HLSporeCounter", 10);
			GiveInventory("HLSAWCounter", 100);
			SetWeapon("9mm Pistol");
			break;
		case 20:
			TakeInventory("SWGasGrenade", 1);
			TakeInventory("HeatSeekingCard", 1);

			GiveInventory("SWShuriken", 1);
			GiveInventory("SWKatana", 1);
			GiveInventory("SWFists", 1);
			GiveInventory("GuardMode1", 1);
			GiveInventory("SWClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("SWShuriken");
			break;
		case 21:
			TakeInventory("CybermageMedkit", 1);
			
			GiveInventory("CMLaserPistol", 1);
			GiveInventory("MagicFist", 1);
			GiveInventory("CMClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("usingmagicnull", 1);
			GiveInventory("MagicMode0", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("CMLaserPistol");
			break;
		case 22:
			TakeInventory("EyeOfSiaItem_EX",999);
			TakeInventory("DivineScarab_Ex",999);
			TakeInventory("LighterofGumercindo_EX",999);	
			
			GiveInventory("PSMagnum", 1);
			GiveInventory("PSMachete", 1);
			GiveInventory("JonClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("PSMagnum");
			break;
		case 23:
			TakeInventory("RRCowPie",999);
			TakeInventory("RRBubbaBeer",999);
			TakeInventory("RRCheapasswhiskey",999);
			TakeInventory("RRDrunkAmount",999);
			TakeInventory("RRFoodAmount",999);
			
			GiveInventory(" .454 Casull Pistol ", 1);
			GiveInventory(" RR Crowbar ", 1);
			GiveInventory("RRClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon(" .454 Casull Pistol ");
			break;
		case 24:
			TakeInventory("Q2Silencer", 999);
			TakeInventory("Q2EnvironmentSuit", 999);
			TakeInventory("Q2Invulnerability", 999);
			TakeInventory("Q2QuadDamage", 999);
			TakeInventory("Q2DualFireDamage", 999);
			TakeInventory("Q2DoubleDamage", 999);
			
			GiveInventory("Q2Blaster", 1);
			GiveInventory("BittermanClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("Q2Blaster");
			break;
		case 25:
			TakeInventory("Hexen2Level", 0x7FFFFFFF);
			TakeInventory("Hexen2Experience", 0x7FFFFFFF);
			TakeInventory("Hexen2Intelligence", 0x7FFFFFFF);
			TakeInventory("Hexen2Wisdom", 0x7FFFFFFF);
			TakeInventory("Hexen2Dexterity", 0x7FFFFFFF);
			TakeInventory("Hexen2Strength", 0x7FFFFFFF);
			TakeInventory("Hexen2BlueManaAdd", 0x7FFFFFFF);
			TakeInventory("Hexen2GreenManaAdd", 0x7FFFFFFF);
			TakeInventory("Hexen2HealthAdd", 0x7FFFFFFF);
			TakeInventory("PortQuartzFlask3", 999);
			TakeInventory("PortSuperHealth3", 999);
			TakeInventory("PortGhostly2", 999);
			TakeInventory("PortIconDefender2", 999);
			TakeInventory("PortTorch3", 999);
			TakeInventory("PortKraterOfMight2", 999);
			TakeInventory("Hexen2TomeOfPower", 999);
			TakeInventory("Hexen2ForceCube", 999);
			//TakeInventory("Hexen2Started", 1);
			
			GiveInventory("Hexen2Level", 1);
			GiveInventory("Hexen2Intelligence", 9);
			GiveInventory("Hexen2Wisdom", 11);
			GiveInventory("Hexen2Dexterity", 9);
			GiveInventory("Hexen2Strength", 11);
			GiveInventory("Hexen2BloodFire", 1);
			GiveInventory("Hexen2Sickle", 1);
			GiveInventory("Hexen2Class", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("Hexen2BloodFire");
			break;
		case 26:
			TakeInventory("Goldeneye_GoldenGun", 999);
			TakeInventory("Goldeneye_TimedMines", 999);
			TakeInventory("Goldeneye_ProximityMines", 999);
			TakeInventory("Goldeneye_RemoteMines", 999);
			
			GiveInventory("BondClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			GiveInventory("Goldeneye_PP7Silenced", 1);
			GiveInventory("Goldeneye_Slapper", 1);
			GiveInventory("Goldeneye_PP7Magazine", 7);
			GiveInventory("Goldeneye_PP7DualMagazine" ,7);
			GiveInventory("Goldeneye_KF7Magazine", 30);
			GiveInventory("Goldeneye_KF7DualMagazine", 30);
			GiveInventory("Goldeneye_AutoShotgunMagazine", 5);
			GiveInventory("Goldeneye_AutoShotgunDualMagazine", 5);
			GiveInventory("Goldeneye_AR33Magazine", 30);
			GiveInventory("Goldeneye_AR33DualMagazine", 30);
			GiveInventory("Goldeneye_RocketLauncherMagazine", 1);
			GiveInventory("Goldeneye_RocketLauncherDualMagazine", 1);
			GiveInventory("Goldeneye_RCP90Magazine", 80);
			GiveInventory("Goldeneye_RCP90DualMagazine", 80);
			GiveInventory("Goldeneye_GoldenGunMagazine", 1);
			GiveInventory("Goldeneye_GoldenGunDualMagazine", 1);
			GiveInventory("Goldeneye_SniperMagazine", 8);
			GiveInventory("Goldeneye_SniperDualMagazine", 8);
			GiveInventory("Goldeneye_D5KMagazine", 80);
			GiveInventory("Goldeneye_D5KDualMagazine", 80);
			GiveInventory("Goldeneye_ThrowingKnivesMagazine", 1);
			GiveInventory("Goldeneye_ThrowingKnivesDualMagazine", 1);
			SetWeapon("Goldeneye_PP7Silenced");
			break;
		case 27:
			TakeInventory("Catacomb_SmallHealthPotion", 999);
			TakeInventory("Catacomb_LargeHealthPotion", 999);
			TakeInventory("Catacomb_Waves", 999);
			TakeInventory("Catacomb_XTerminators", 999);
			TakeInventory("Catacomb_Bursts", 999);
			TakeInventory("Catacomb_Zappers", 999);
			TakeInventory("Catacomb_Nukes", 999);
			TakeInventory("Catacomb_Bolts", 999);
			TakeInventory("Catacomb_Hourglass", 999);
			TakeInventory("Catacomb_HourglassCooldown", 999);	
		
			GiveInventory("Catacomb3D_MagicMissile", 1);
			GiveInventory("CatacombClass", 1);
			GiveInventory("CanWolfMovement", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("TauntButton", 1);
			SetWeapon("Catacomb3D_MagicMissile");
			break;
	}
}

Script "Samsara_FillInventory" (void)
{
	int a, b;
	int pClass = PlayerClass(PlayerNumber());
	str weapon, ammo1, ammo2;
	for(a = 0; a < SLOTCOUNT; a++)
	{
		weapon = ClassWeapons[pClass][a][0];
		ammo1 = ClassWeapons[pClass][a][1];
		ammo2 = ClassWeapons[pClass][a][2];
		if(strlen(weapon) > 0) { for(b = 0; b < 256; b++) { GiveInventory(weapon,1); } }
		if(strlen(ammo1) > 0) { for(b = 0; b < 1024; b++) { GiveInventory(ammo1,1); } }
		if(strlen(ammo2) > 0) { for(b = 0; b < 1024; b++) { GiveInventory(ammo2,1); } }
	}
	for(a = 0; a < UNIQUECOUNT; a++)
	{
		weapon = ClassUniques[pClass][a*2];
		ammo1 = ClassUniques[pClass][(a*2)+1];
		if(strlen(weapon) > 0) { for(b = 0; b < 256; b++) { GiveInventory(weapon,1); } }
		if(strlen(ammo1) > 0) { for(b = 0; b < 1024; b++) { GiveInventory(ammo1,1); } }
	}
	switch(pClass)
	{
		default: break;
		case 0:	
			GiveInventory("Doom64UnmakerArtifact",3);
			GiveInventory("Doom64_IHaveUnmaker",1);
			GiveInventory("DGHasChaingun",1);
			GiveInventory("DGHasMinigun",1);
			GiveInventory("DGHasRocketLauncher",1);
			GiveInventory("DGHasGrenadeLauncher",1);
			GiveInventory("DGHasPlasmaRifle",1);
			GiveInventory("DGHasRailGun",1);
			GiveInventory("DGHasBFG9000",1);
			GiveInventory("DGHasBFG10K",1);
			break;
		case 2:
			GiveInventory("PortQuartzFlask",16);
			GiveInventory("PortSuperHealth",5);
			GiveInventory("PortTorch",16);
			GiveInventory("PortGhostly",16);
			GiveInventory("PortRingInvuln",16);
			GiveInventory("CorvusMegasphere",16);
			TakeInventory("TomeOfPowerCooldown",65536);
			break;
		case 3:
			GiveInventory("TotenkopfSecretCounter",30);
			GiveInventory("Wolfen_IHaveSlot2",1);
			GiveInventory("Totenkopf_IHaveDualPistols",1);
			GiveInventory("Totenkopf_IHaveDualMP40s",1);
			GiveInventory("Totenkopf_IHaveMauser",1);
			GiveInventory("Totenkopf_IHaveDualMausers",1);
			GiveInventory("Totenkopf_IHaveSTG44",1);
			GiveInventory("Totenkopf_IHaveFlameThrower",1);
			GiveInventory("Totenkopf_IHaveMG42",1);
			GiveInventory("Totenkopf_IHaveScope",1);	
			break;
		case 4:
			GiveInventory("AllyCellphone",1);
			TakeInventory("FlechetteCooldown",65536);
			TakeInventory("DiscOfRepulsionCooldown",65536);	
			GiveInventory("PortQuartzFlask2",16);
			GiveInventory("PortSuperHealth2",5);
			GiveInventory("PortKraterOfMight",3);
			GiveInventory("PortTorch2",16);
			GiveInventory("PortIconDefender",16);
			break;
		case 6:
			GiveInventory("CanDualPistols",1);
			GiveInventory("CanDualShotties",1);
			break;
		case 7:
			SetInventory("QuakeQuadTimer", 0);
            SetInventory("SamsaraQuadDamageCooldownDisplay", 0);
			GiveInventory("QuadDamageItem", 1);
			if(!isLMS()) { GiveQuad(1050); }
			break;
		case 8:
			GiveInventory("AllyCellphone",1);
			break;
		case 10:
			TakeInventory("ThrowPower",65536);
			TakeInventory("ThrowPowerBig",65536);
			break;
		case 11:
			GiveInventory("StrifeSigilPiece",5);
			GiveInventory("StrifeSigilPiecePreferred",5);
			GiveInventory("StrifePortMedikit",15);
			GiveInventory("StrifeStimpack2",15);
			GiveInventory("StrifeSurgeryKit2",5);
			GiveInventory("PortShadowArmor",2);
			GiveInventory("PortEnviSuit",5);
			break;
		case 12:
			GiveInventory("AllyCellphone",1);
			break;
		case 16:
			GiveInventory("AllyCellphone",1);
			GiveInventory("Medtube",20);
			GiveInventory("IPOGReversoPill",1);
			break;
		case 17:
			GiveInventory("DisruptorTeraBall",1);
			break;
		case 18:
			GiveInventory("WTHealthPhial",10);
			GiveInventory("WTInvisibilityPhial",10);
			GiveInventory("WTFireProofPhial",10);
			GiveInventory("WTStrengthPhial",10);
			GiveInventory("WTExperience",60000);
			break;
		case 19:
			GiveInventory("flashlightammo",4200);
			break;
		case 20:
			GiveInventory("SWNuke",1);
			GiveInventory("SuperHealth",1);
			GiveInventory("UziAmountCheck", 1);
			break;
		case 21:
			GiveInventory("CybermageMedkit",15);
			break;	
		case 22:
			GiveInventory("EyeOfSiaItem_EX",3);
			GiveInventory("DivineScarab_Ex",2);
			GiveInventory("LighterofGumercindo_EX",6);		
			break;	
		case 23:
			GiveInventory("RRCowPie",6);
			GiveInventory("RRBubbaBeer",6);
			GiveInventory("RRCheapasswhiskey",100);
			GiveInventory("AllyCellphone",1);
			break;
		case 24:
			GiveInventory("Q2QuadDamage",1);
			GiveInventory("Q2DualFireDamage",2);
			GiveInventory("Q2DoubleDamage",2);
			GiveInventory("Q2Invulnerability",2);
			GiveInventory("Q2Silencer",2);
			GiveInventory("Q2EnvironmentSuit",2);
			break;
		case 25:
			GiveInventory("PortQuartzFlask3",16);
			GiveInventory("PortGhostly2",16);
			GiveInventory("PortTorch3",16);
			GiveInventory("PortIconDefender2",16);
			GiveInventory("PortSuperHealth3",5);
			GiveInventory("PortSuperHealth3",5);
			GiveInventory("PortKraterOfMight2",3);
			GiveInventory("Hexen2Experience",17343000);
			break;
		case 26:
			GiveInventory("Goldeneye_ThrowingKnivesDualToken",1);
			GiveInventory("Goldeneye_PP7DualToken",1);
			GiveInventory("Goldeneye_KF7DualToken",1);
			GiveInventory("Goldeneye_AutoShotgunDualToken",1);
			GiveInventory("Goldeneye_AR33DualToken",1);
			GiveInventory("Goldeneye_RocketLauncherDualToken",1);
			GiveInventory("Goldeneye_RCP90DualToken",1);
			GiveInventory("Goldeneye_LaserDualToken",1);
			GiveInventory("Goldeneye_GoldenGunDualToken",1);
			GiveInventory("Goldeneye_SniperDualToken",1);
			GiveInventory("Goldeneye_D5KDualToken",1);
			break;
		case 27:
			GiveInventory("Catacomb_SmallHealthPotion",99);
			GiveInventory("Catacomb_LargeHealthPotion",99);
			GiveInventory("Catacomb_Hourglass",1);
			TakeInventory("Catacomb_HourglassCooldown",180);
			break;
	}
	GiveInventory("Samsara_ModeWeaponChange",1);
}

//======================================================================================================================
//							Map Inventory - For weapons to advanced for generic pickup code
//======================================================================================================================

Script "Samsara_MapInventory" (int item, int dropped)
{
	int weaponStay = GetCvar("sv_weaponstay");
	int maxDistance = 80;
	int invokerX = GetActorX(0)>>16;
	int invokerY = GetActorY(0)>>16;
	int invokerZ = GetActorZ(0)>>16;
	int inventoryX, inventoryY, inventoryZ, result;
	
	switch(item)
	{
		default: break;
		case 1:
			if(!CheckInventory("Totenkopf_IHaveMauser"))
			{
				GiveInventory("Totenkopf_MauserPickedUpX",invokerX+65536);
				GiveInventory("Totenkopf_MauserPickedUpY",invokerY+65536);
				GiveInventory("Totenkopf_MauserPickedUpZ",invokerZ+65536);
				GiveInventory("Samsara_ModeWeaponChange",1);
				GiveInventory("Totenkopf_IHaveMauser",1);
				GiveInventory("Clip",5);
				result = 1;
			}
			else if(!CheckInventory("Totenkopf_IHaveDualMausers"))
			{
				inventoryX = CheckInventory("Totenkopf_MauserPickedUpX")-65536;
				inventoryY = CheckInventory("Totenkopf_MauserPickedUpY")-65536;
				inventoryZ = CheckInventory("Totenkopf_MauserPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Totenkopf_MauserPickedUpX",131072);
					TakeInventory("Totenkopf_MauserPickedUpY",131072);
					TakeInventory("Totenkopf_MauserPickedUpZ",131072);
					GiveInventory("Totenkopf_MauserPickedUpX",invokerX+65536);
					GiveInventory("Totenkopf_MauserPickedUpY",invokerY+65536);
					GiveInventory("Totenkopf_MauserPickedUpZ",invokerZ+65536);
					GiveInventory("Totenkopf_IHaveDualMausers",1);
					GiveInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("Clip",5);
					result = 1;
				}
			}
			else if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",5); result = 1; }}
			break;
		case 2:
			if(!CheckInventory("Machine Gun"))
			{
				GiveInventory("Shell",5); 
				GiveInventory("Clip",20); 
				result = 1;
			}
			else if(CheckInventory("Shell") < GetAmmoCapacity("Shell")) { if((!weaponStay || dropped)) { GiveInventory("Clip",20); GiveInventory("Shell",5); result = 1; }}
			else if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",20); result = 1; }}
			break;
		case 3:
			if(!CheckInventory("Totenkopf_IHaveSTG44"))
			{
				GiveInventory("Totenkopf_IHaveSTG44", 1);
				GiveInventory("Samsara_ModeWeaponChange",1);
				GiveInventory("Shell",30); 
				GiveInventory("Clip",20); 
				result = 1;
			}
			else if(CheckInventory("Shell") < GetAmmoCapacity("Shell")) { if((!weaponStay || dropped)) { GiveInventory("Clip",20); GiveInventory("Shell",30); result = 1; }}
			else if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",20); result = 1; }}
			break;
		case 4:
			if(!CheckInventory("  Chaingun  "))
			{
				GiveInventory("Totenkopf_MP40PickedUpX",invokerX+65536);
				GiveInventory("Totenkopf_MP40PickedUpY",invokerY+65536);
				GiveInventory("Totenkopf_MP40PickedUpZ",invokerZ+65536);
				GiveInventory("Samsara_ModeWeaponChange",1);
				result = 1;
			}
			else if(!CheckInventory("Totenkopf_IHaveDualMP40s"))
			{
				inventoryX = CheckInventory("Totenkopf_MP40PickedUpX")-65536;
				inventoryY = CheckInventory("Totenkopf_MP40PickedUpY")-65536;
				inventoryZ = CheckInventory("Totenkopf_MP40PickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Totenkopf_MP40PickedUpX",131072);
					TakeInventory("Totenkopf_MP40PickedUpY",131072);
					TakeInventory("Totenkopf_MP40PickedUpZ",131072);
					GiveInventory("Totenkopf_MP40PickedUpX",invokerX+65536);
					GiveInventory("Totenkopf_MP40PickedUpY",invokerY+65536);
					GiveInventory("Totenkopf_MP40PickedUpZ",invokerZ+65536);
					GiveInventory("Totenkopf_IHaveDualMP40s",1);
					GiveInventory("Samsara_ModeWeaponChange",1);
					result = 1;
				}
			}
			break;
		case 5:
			if(!CheckInventory("HornetGun")) { result = 1; }	
			
			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,11);
			}
			break;	
		case 6: 
			if(!CheckInventory("Assault Shotgun")) { result = 1; }	
			else if(CheckInventory("Shell") < GetAmmoCapacity("Shell")) { if((!weaponStay || dropped)) { result = 1; }}
			
			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,13);
			}
			break;
		case 7:
			if(!CheckInventory(".357 Python")) { GiveInventory("HLDeagleCounter",7); result = 1; }	
			else if(CheckInventory("Shell") < GetAmmoCapacity("Shell")) { if((!weaponStay || dropped)) { result = 1; }}
			
			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,12);
			}
			break;
		case 8:
			if(!CheckInventory("MP5")) { result = 1; }	
			else if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { result = 1; }}
			
			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,14);
				if(random(0,2)==0) GiveInventory("RocketAmmo",3);
			}
			break;
		case 9:
			if(!CheckInventory(" RPG ")) { GiveInventory("HLSporeCounter",10); result = 1; }	
			else if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { result = 1; }}
			
			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,15);
			}
			break;
		case 10:
			if(!CheckInventory("Gauss Cannon")) { result = 1; }	
			else if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { result = 1; }}
			
			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,16);
			}
			break;
		case 11:
			if(!CheckInventory("E.G.O.N.")) { result = 1; }	
			else if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { result = 1; }}
			
			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,17);
			}
			break;
		case 12:
			if(!CheckInventory("Goldeneye_ThrowingKnives"))
			{
				GiveInventory("Goldeneye_KnifePickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_KnifePickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_KnifePickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_ThrowingKnivesDualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_KnifePickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_KnifePickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_KnifePickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_KnifePickedUpX",131072);
					TakeInventory("Goldeneye_KnifePickedUpY",131072);
					TakeInventory("Goldeneye_KnifePickedUpZ",131072);
					GiveInventory("Goldeneye_KnifePickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_KnifePickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_KnifePickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_ThrowingKnivesDualToken",1);
					result = 1;
				}
			}
			break;
		case 13:
			if(!CheckInventory("Goldeneye_KF7Soviet"))
			{
				GiveInventory("Goldeneye_KF7SovietPickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_KF7SovietPickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_KF7SovietPickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_KF7DualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_KF7SovietPickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_KF7SovietPickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_KF7SovietPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_KF7SovietPickedUpX",131072);
					TakeInventory("Goldeneye_KF7SovietPickedUpY",131072);
					TakeInventory("Goldeneye_KF7SovietPickedUpZ",131072);
					GiveInventory("Goldeneye_KF7SovietPickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_KF7SovietPickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_KF7SovietPickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_KF7DualToken",1);
					result = 1;
				}
			}
			break;
		case 14:
			if(!CheckInventory("Goldeneye_AutoShotgun"))
			{
				GiveInventory("Goldeneye_AutoShotgunPickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_AutoShotgunPickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_AutoShotgunPickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_AutoShotgunDualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_AutoShotgunPickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_AutoShotgunPickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_AutoShotgunPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_AutoShotgunPickedUpX",131072);
					TakeInventory("Goldeneye_AutoShotgunPickedUpY",131072);
					TakeInventory("Goldeneye_AutoShotgunPickedUpZ",131072);
					GiveInventory("Goldeneye_AutoShotgunPickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_AutoShotgunPickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_AutoShotgunPickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_AutoShotgunDualToken",1);
					result = 1;
				}
			}
			break;
		case 15:
			if(!CheckInventory("Goldeneye_AR33"))
			{
				GiveInventory("Goldeneye_AR33PickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_AR33PickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_AR33PickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_AR33DualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_AR33PickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_AR33PickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_AR33PickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_AR33PickedUpX",131072);
					TakeInventory("Goldeneye_AR33PickedUpY",131072);
					TakeInventory("Goldeneye_AR33PickedUpZ",131072);
					GiveInventory("Goldeneye_AR33PickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_AR33PickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_AR33PickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_AR33DualToken",1);
					result = 1;
				}
			}
			break;
		case 16:
			if(!CheckInventory("Goldeneye_RocketLauncher"))
			{
				GiveInventory("Goldeneye_RocketLauncherPickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_RocketLauncherPickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_RocketLauncherPickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_RocketLauncherDualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_RocketLauncherPickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_RocketLauncherPickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_RocketLauncherPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_RocketLauncherPickedUpX",131072);
					TakeInventory("Goldeneye_RocketLauncherPickedUpY",131072);
					TakeInventory("Goldeneye_RocketLauncherPickedUpZ",131072);
					GiveInventory("Goldeneye_RocketLauncherPickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_RocketLauncherPickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_RocketLauncherPickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_RocketLauncherDualToken",1);
					result = 1;
				}
			}
			break;
		case 17:
			if(!CheckInventory("Goldeneye_RCP90"))
			{
				GiveInventory("Goldeneye_RCP90PickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_RCP90PickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_RCP90PickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_RCP90DualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_RCP90PickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_RCP90PickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_RCP90PickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_RCP90PickedUpX",131072);
					TakeInventory("Goldeneye_RCP90PickedUpY",131072);
					TakeInventory("Goldeneye_RCP90PickedUpZ",131072);
					GiveInventory("Goldeneye_RCP90PickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_RCP90PickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_RCP90PickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_RCP90DualToken",1);
					result = 1;
				}
			}
			break;
		case 18:
			weaponStay = GetCvar("samsara_permault");
			if(!CheckInventory("Goldeneye_Moonraker"))
			{
				GiveInventory("Goldeneye_GoldenGun",1);
				GiveInventory("Goldeneye_LaserPickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_LaserPickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_LaserPickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_LaserDualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_LaserPickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_LaserPickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_LaserPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_LaserPickedUpX",131072);
					TakeInventory("Goldeneye_LaserPickedUpY",131072);
					TakeInventory("Goldeneye_LaserPickedUpZ",131072);
					GiveInventory("Goldeneye_LaserPickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_LaserPickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_LaserPickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_LaserDualToken",1);
					GiveInventory("Goldeneye_GoldenGunDualToken",1);
					GiveInventory("Goldeneye_GoldenGunRounds",3);
					result = 1;
				}
			}
			else if(CheckInventory("Goldeneye_GoldenGunRounds") < GetAmmoCapacity("Goldeneye_GoldenGunRounds")) { if((!weaponStay || dropped)) { GiveInventory("Goldeneye_GoldenGunRounds",3); result = 1; }}
			break;
		case 19: GiveInventory("CanDualPistols",1); break;	
		case 20:
			if(!CheckInventory("WSTE-M5 Combat Shotgun"))
			{
				GiveInventory("MarathonShotgunPickedUpX",invokerX+65536);
				GiveInventory("MarathonShotgunPickedUpY",invokerY+65536);
				GiveInventory("MarathonShotgunPickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("CanDualShotties"))
			{
				inventoryX = CheckInventory("MarathonShotgunPickedUpX")-65536;
				inventoryY = CheckInventory("MarathonShotgunPickedUpY")-65536;
				inventoryZ = CheckInventory("MarathonShotgunPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("MarathonShotgunPickedUpX",131072);
					TakeInventory("MarathonShotgunPickedUpY",131072);
					TakeInventory("MarathonShotgunPickedUpZ",131072);
					GiveInventory("MarathonShotgunPickedUpX",invokerX+65536);
					GiveInventory("MarathonShotgunPickedUpY",invokerY+65536);
					GiveInventory("MarathonShotgunPickedUpZ",invokerZ+65536);
					GiveInventory("CanDualShotties",1);
					result = 1;
				}
			}
			break;
		case 21:
			if(!CheckInventory("SWUzi"))
			{
				GiveInventory("SWUziPickedUpX",invokerX+65536);
				GiveInventory("SWUziPickedUpY",invokerY+65536);
				GiveInventory("SWUziPickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("UziAmountCheck"))
			{
				inventoryX = CheckInventory("SWUziPickedUpX")-65536;
				inventoryY = CheckInventory("SWUziPickedUpY")-65536;
				inventoryZ = CheckInventory("SWUziPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{				
					TakeInventory("SWUziPickedUpX",131072);
					TakeInventory("SWUziPickedUpY",131072);
					TakeInventory("SWUziPickedUpZ",131072);
					GiveInventory("SWUziPickedUpX",invokerX+65536);
					GiveInventory("SWUziPickedUpY",invokerY+65536);
					GiveInventory("SWUziPickedUpZ",invokerZ+65536);
					GiveInventory("UziAmountCheck",1);
					result = 1;
				}
			}
			break;
		case 23:
			if(CheckInventory("QuakeQuadTimer") <= 0)
			{
				if (isLMS())
				{
					if (GetCvar("samsara_permaquad") == 1)
					{ GiveInventory("QuadDamageItem", 1); }
				}
				else
				{
					GiveQuad(1050);
		
					if (GetCvar("samsara_permaquad") == 1)//if (isCoop() || isSinglePlayer())
					{ GiveInventory("QuadDamageItem", 1); }
				}
				
				result = 1;
			}
			break;
		case 24:
			if(!CheckInventory("Subestron Arm"))
			{
				GiveInventory("Subestron Arm", 1);
				result = 1;
			}
			break;
		case 25:
			if(!CheckInventory("GotNuke"))
			{
				GiveInventory("GotNuke", 1);
				result = 1;
			}
			break;
		case 26:
			if(!CheckInventory(" Chaingun "))
			{
				GiveInventory("Samsara_ModeWeaponChange",1);
				GiveInventory("Clip",20);
				result = 1;
			}
			else if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",20); result = 1; }}
			break;
		case 27:
			if(!CheckInventory(" Minigun ") && CheckInventory("Doom64Mode")==0)
			{
				GiveInventory("Samsara_ModeWeaponChange",1);
				GiveInventory("Clip",20);
				result = 1;
			}
			else if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",20); result = 1; }}
			break;
		case 28:
			if(!CheckInventory("Rocket Launcher"))
			{
				GiveInventory("Samsara_ModeWeaponChange",1);
				GiveInventory("RocketAmmo",2);
				result = 1;
			}
			else if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { GiveInventory("RocketAmmo",2); result = 1; }}
			break;
		case 29:
			if(!CheckInventory(" GrenadeLauncher ") && CheckInventory("Doom64Mode")==0)
			{
				GiveInventory("Samsara_ModeWeaponChange",1);
				GiveInventory("RocketAmmo",2);
				result = 1;
			}
			else if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { GiveInventory("RocketAmmo",2); result = 1; }}
			break;
		case 30:
			if(!CheckInventory("Plasma Rifle"))
			{
				GiveInventory("Samsara_ModeWeaponChange",1);
				GiveInventory("Cell",40);
				result = 1;
			}
			else if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); result = 1; }}
			break;
		case 31:
			if(!CheckInventory(" RailGun ") && CheckInventory("Doom64Mode")==0)
			{
				GiveInventory("Samsara_ModeWeaponChange",1);
				GiveInventory("Cell",40);
				result = 1;
			}
			else if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); result = 1; }}
			break;
		case 32:
			GiveInventory("Doom64_IHaveUnmaker", 1);
			if(!CheckInventory("B.F.G. 9000"))
			{
				GiveInventory("Samsara_ModeWeaponChange",1);
				GiveInventory("Cell",40);
				result = 1;
			}
			else if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); result = 1; }}
			break;
		case 33:
			GiveInventory("Doom64_IHaveUnmaker", 1);
			if(!CheckInventory(" BFG10K ") && CheckInventory("Doom64Mode")==0)
			{
				GiveInventory("Doom64_IHaveUnmaker", 1);
				GiveInventory("Samsara_ModeWeaponChange",1);
				GiveInventory("Cell",40);
				result = 1;
			}
			else if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); result = 1; }}
			break;
	}
	SetResultValue(result);
	//PrintBold(s:"Distance X: ",d:abs(invokerX - inventoryX),s:", Distance Y: ",d:abs(invokerY - inventoryY),s:", Distance Z: ",d:abs(invokerZ - inventoryZ));
}

Script "Samsara_MapInventoryLogger" (int message) clientside
{
	str logmsg;
	switch(message)
	{
		default: break;
		case 2: logmsg = "STG44 Assault Rifle"; break;
	}
	Log(s:msgColors[GetCVar("msg0color")], s:logmsg);
}

//======================================================================================================================
//											Spawn Slots that respawn in the map
//======================================================================================================================

Script "Samsara_SpawnSlot" (int slot, int toss)
{
	int newTid = UniqueTid();
	str slotweapon;
	switch(slot)
	{
		case 1: slotweapon = "SamsaraSlotOnePickup"; break;
		case 2: slotweapon = "SamsaraSlotTwoPickup"; break;
		case 3: slotweapon = "SamsaraSlotThreePickup"; break;
		case 4: slotweapon = "SamsaraSlotFourPickup"; break;
		case 5: slotweapon = "SamsaraSlotFivePickup"; break;
		case 6: slotweapon = "SamsaraSlotSixPickup"; break;
		case 7: slotweapon = "SamsaraSlotSevenPickup"; break;
	}
	SpawnSpotFacingForced(slotweapon,0,newTid);
	SetActorProperty(newTid,APROP_Dropped,GetActorProperty(0,APROP_Dropped));
	if(toss) SetActorVelocity(newTid,random(-4.0,4.0),random(-4.0,4.0),0,0,0);
	Thing_ChangeTid(newTid,0);
}

//======================================================================================================================
//													Player Shrinker
//======================================================================================================================

Script "Samsara_PlayerShrinker" (int condition)
{
	if(!condition)
	{	
		if(CheckInventory("ShrunkPlayer"))
			terminate;
			
		int shrinktimer;
		int activatorstid = ActivatorTid();
		int usertid = UniqueTid();
		int dummytid = UniqueTid();
		int ScaleX = GetActorProperty(0,APROP_ScaleX);
		int ScaleY = GetActorProperty(0,APROP_ScaleY);
		int shrunkenscalex = FixedMul(ScaleX,0.2);
		int shrunkenscaley = FixedMul(ScaleY,0.2);
		int viewheight = GetActorProperty(0,APROP_ViewHeight);
		GiveInventory("ShrunkPlayer",1);	
		SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
		for(int a = 0; a < 10; a++)
		{
			SetActorProperty(0,APROP_ViewHeight,FixedMul(viewheight,1.0-(a*0.08)));
			Delay(2);
		}
		Delay(1);
		SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
		int pln = PlayerNumber();
		
		//Translation helper, because the flag isn't valid
		SpawnSpotForced("TranslationDummy",0,dummytid,0);
		Thing_SetTranslation(dummytid, -1);
		Thing_ChangeTid(0, usertid);
		SetActivator(dummytid, AAPTR_Default);
		MorphActor(usertid,strparam(s:PlayerActors[PlayerClass(pln)],s:"_Shrink"),"Zombieman3",525,MRF_FULLHEALTH|MRF_UNDOBYTOMEOFPOWER|MRF_LOSEACTUALWEAPON|MRF_NEWTIDBEHAVIOUR,"ShrinkFlash","ShrinkFlash");
		Thing_SetTranslation(usertid, -1);
		SetActivator(usertid, AAPTR_Default);
		Thing_ChangeTid(usertid, activatorstid);
		Thing_Remove(dummytid);
		
		SetActorProperty(0,APROP_ScaleX,shrunkenscalex);
		SetActorProperty(0,APROP_ScaleY,shrunkenscaley);
		
		while(shrinktimer <= 420)
		{
			if((ClassifyActor(0) & ACTOR_DEAD))
				terminate;
			
			Delay(1);
			
			shrinktimer++;
		}
		TakeInventory("ShrunkPlayer",1);
		int newtid = UniqueTid();
		if(!Spawn(PlayerActors[PlayerClass(pln)],GetActorX(0),GetActorY(0),GetActorZ(0),newtid))
		{
			Thing_Damage2(0,500000000000,"Explosive");
		}
		else
		{
			Thing_Remove(newtid);
		}
		if((ClassifyActor(0) & ACTOR_DEAD))
			terminate;
			
		SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
		for(a = 0; a < 10; a++)
		{
			SetActorProperty(0,APROP_ScaleX,shrunkenscalex+(FixedMul(ScaleX,0.1)*a));
			SetActorProperty(0,APROP_ScaleY,shrunkenscaley+(FixedMul(ScaleY,0.1)*a));
			SetActorProperty(0,APROP_ViewHeight,FixedMul(viewheight,0.28+(a*0.08)));
			Delay(2);
		}
		UnMorphActor(0,1);
		SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
		SetActorProperty(0,APROP_ViewHeight,viewheight);
		SetActorProperty(0,APROP_ScaleX,ScaleX);
		SetActorProperty(0,APROP_ScaleY,ScaleY);
	}
	else
	{
		SetResultValue(ClassifyActor(0) & ACTOR_PLAYER);
	}
}

//======================================================================================================================
//								Cvar GZDoom checker - Somewhat redundant over IsThisZandro
//======================================================================================================================

Script "Samsara_GZDoomChecker" (void)
{
	if(GetCvar("samsara_runninginzdoom"))
		SetResultValue(1);
	
	else
		SetResultValue(0);
}

//======================================================================================================================
//												Taunt Button for GZDoom
//======================================================================================================================

Script "TauntButton" (void) NET
{
	if(!GetCVar("samsara_runninginzdoom") && GetCVar("samsara_runninginzandro"))
		Print(s:"Zandronum detected, use traditional taunt bind instead");
	
	else
		UseInventory("TauntButton");
}

//======================================================================================================================
//											Projectile Ripper Predictor
//======================================================================================================================

Script "Samsara_ProjectilePredictor" (int type)
{
	str typeactor;
	int speedx = GetActorVelX(0);
	int speedy = GetActorVelY(0);
	int speedz = GetActorVelZ(0);
	int divideamount = FixedDiv(GetActorProperty(0,APROP_Speed),GetActorProperty(0,APROP_Radius))>>16;
	int modifier = 1.0/divideamount;
	int currentmultiplier;
	int newactivator = UniqueTid();
	Thing_ChangeTid(0,newactivator);
	SetActivator(0,AAPTR_Target);
	int player = ActivatorTid();
	int newplayer = UniqueTid();
	Thing_ChangeTid(0,newplayer);
	
	int newtid1 = UniqueTid();
	int newtid2 = UniqueTid();
	int newtid3 = UniqueTid();
	
	switch(type)
	{
		case 1:
			typeactor = "DisruptorGP_12_Explosion";
			break;
		case 2:
			typeactor = "Fwalling_Explosion";
			break;
		case 3:
			typeactor = "RMR-RedPlasma_Explosion";
			break;
		case 4:
			typeactor = "Ksphere_Rott_Explosion";
			break;
		case 5:
			typeactor = "Goldeneye_MoonrakerRay_Explosion";
			break;
	}
	SpawnForced(typeactor,GetActorX(newactivator),GetActorY(newactivator),GetActorZ(newactivator),newtid3);
	SetActivator(newtid3,AAPTR_Default);
	SetPointer(AAPTR_Target,newplayer);
	Thing_ChangeTid(newtid3,0);
	SetActivator(newplayer,AAPTR_Default);
	for(int a = 1; a < divideamount; a++)
	{
		currentmultiplier = a * modifier;
		SpawnForced(typeactor,GetActorX(newactivator) + FixedMul(speedx,currentmultiplier),GetActorY(newactivator) + FixedMul(speedy,currentmultiplier), GetActorZ(newactivator) + FixedMul(speedz,currentmultiplier),newtid1);
		SpawnForced(typeactor,GetActorX(newactivator) - FixedMul(speedx,currentmultiplier),GetActorY(newactivator) - FixedMul(speedy,currentmultiplier), GetActorZ(newactivator) - FixedMul(speedz,currentmultiplier),newtid2);
		SetActivator(newtid1,AAPTR_Default);
		SetPointer(AAPTR_Target,newplayer);
		SetActivator(newtid2,AAPTR_Default);
		SetPointer(AAPTR_Target,newplayer);
		SetActivator(newplayer,AAPTR_Default);
		Thing_ChangeTid(newtid1,0);
		Thing_ChangeTid(newtid2,0);
		
		if(ClassifyActor(0) & ACTOR_WORLD)
			terminate;
	}
}

//======================================================================================================================
//					Resonate. Don't know what the hell this is, but I found it in marathon's acs
//======================================================================================================================
script "SamsaraResonate" (int which, int frequency) clientside //608
{
    if (which < 0 || which >= RESCOUNT) { Log(s:"\caERROR\c- (minor): Attempted to resonate with invalid index (", d:which, s:")"); terminate; }

    int pln = PlayerNumber();
    int locktime = Timer();

    int item = ResonantItems[which][0];
    int low  = ResonantItems[which][1];
    int high = ResonantItems[which][2];

    if (frequency == 0) { Log(s:"\caERROR\c-: Attempted to resonate item \"", s:item, s:"\" with frequency of 0"); terminate; }
    frequency = abs(frequency);

    int resPosition     = random(low, high);
    int resNextPos      = resPosition;
    int resAmplitude    = 0;
    int resIndex        = 0;
    int resTimer;
    int resonance;

    ResonantTimes[pln][which] = locktime;

    while (ResonantTimes[pln][which] == locktime)
    {
        if (abs(resPosition - resNextPos) <= 2) { resPosition = resNextPos; }
        else { resPosition += (resNextPos - resPosition) / 3; }

        if (resAmplitude == 0) { resTimer = 0; }

        if (resTimer == 0)
        {
            resAmplitude += random(1.0, 20.0);
            resTimer = random(1, 70);
            resNextPos = random(low, high);
        }

        resonance = FixedMul(resAmplitude, sin(itof(resIndex) / frequency)) + itof(resPosition);
        resAmplitude = max(0, resAmplitude - 0.5);

        TakeInventory(item, 0x7FFFFFFF);
        GiveInventory(item, ftoi(resonance));

        Delay(1);
        resTimer--;
        resIndex++;
        resIndex %= (frequency * 100);
    }
}

//======================================================================================================================
//														Other
//======================================================================================================================

Script "Samsara_PlayerFreezeTranslation" (void)
{
	//SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
	CreateTranslation(7680, 0:255=%[0.078,0.062,0.140]:[1.16,1.16,1.348]);
	Thing_SetTranslation(0,7680);
}

Script "ExtraDeathFX" (int mode) // Samsara Extra Death Special Effects -- 2530
{
	Switch(mode)
	{
		Case 1:
			SetActorProperty(0, APROP_RenderStyle, STYLE_TRANSLUCENTSTENCIL);
			SetActorProperty(0, APROP_StencilColor, 0x000000);
			break;
		Case 2:
			SetActorProperty(0, APROP_RenderStyle, STYLE_OptFuzzy);
			ThrustThingZ(0,5,0,0);
			break;
	}
}

str itemTypeCvars[3] = { "samsara_replace_computermap", "samsara_replace_lightamplifier", "samsara_replace_blursphere" };
str itemReplacementNames[22] = { "Medikit", "Soulsphere", "GreenArmor", "BlueArmor", "Megasphere", "Clipbox", "Shellbox",
"RocketBox", "CellPack", "Backpack", "AllMap", "Berserk", "BlurSphere", "InvulnerabilitySphere", "Infrared", "Chainsaw",
"Shotgun", "SuperShotgun", "Chaingun", "RocketLauncher", "PlasmaRifle", "BFG9000" };

Script "Samsara_SwitchableObject" (int type)
{
	int value = GetCvar(itemTypeCvars[type]);
	if(value == 0 || (type == 0 && value == 11) || (type == 1 && value == 15) || (type == 2 && value == 13))
		terminate;
	else
	{
		int itemTid = UniqueTid();
		SpawnForced(itemReplacementNames[value-1],GetActorX(0),GetActorY(0),GetActorZ(0),itemTid);
		SetActorProperty(itemTid,APROP_Dropped,GetActorProperty(0,APROP_Dropped));
		Thing_Remove(0);
		Thing_ChangeTid(itemTid,0);
	}
}
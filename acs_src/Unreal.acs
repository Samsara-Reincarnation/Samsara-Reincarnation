#library "Unreal"
#include "zcommon.acs"
#include "CommonFuncs.h"

Script "Unreal_Loop" Enter
{	
	int charging, speedx, speedy, lasttimer, velocity, movement;
	int chargetime = 39;
	While(CheckInventory("UnrealClass") == 1 && (ClassifyActor(0) && ACTOR_PLAYER))
	{
		int input = GetPlayerInput(-1,INPUT_BUTTONS);
		int DPistolLevel = (CheckInventory("UDPistolUpgrade"));
		int Dpistolammo = (CheckInventory("DPistolAmmo"));
			
		if(GetAmmoCapacity("DPistolAmmo") != 60 +(DPistolLevel*10))
			SetAmmoCapacity("DPistolAmmo", 60+(DPistolLevel*10));
		
		if(!(input & BT_ALTATTACK) && charging >= chargetime)
		{
			charging = 0;
			GiveInventory("DPistolAmmo", 1);
		}
			
		if((input & BT_AltAttack) && (input & BT_Attack))
			GiveInventory("Unreal_Combo", 1);
			
		charging++;
		
		speedx = GetActorVelX(0);
		speedy = GetActorVelY(0);
			
		velocity = magnitudeTwo_f(speedx, speedy);
		if(velocity>>8 != 0)
			movement = 750/((velocity>>8)*7);
		else
			movement = 0;
													
		if((Timer()-lasttimer) > movement && movement != 0)
		{
			//PlaySound(0, "HLPlayer/Step", CHAN_BODY, 1.0, false, ATTN_NORM);
			SpawnSpotForced("Unreal_Step",0,0,0);
			lasttimer = Timer();
		}
		
		delay(1);	
		TakeInventory("Unreal_Combo", 1);
	}		
}

Script "Unreal_ShockCoreTidToken" (void)
{
	int newtid = UniqueTid()>>16;
	Thing_ChangeTid(0,newtid);
	//PrintBold(d:newtid);
	//PrintBold(d:ActivatorTid());
	SetActivatorToTarget(0);
	TakeInventory("Unreal_ShockCoreTidToken",65536);
	GiveInventory("Unreal_ShockCoreTidToken",newtid);
}

Script "Unreal_ASMDRetrieveTracer" (void)
{
	int newtid = UniqueTid()>>16;
	Thing_ChangeTid(0,newtid);
	SetActivatorToTarget(0);
	int detectTid = CheckInventory("Unreal_ShockCoreTidToken");
	TakeInventory("Unreal_ShockCoreTidToken",65536);
	SetActivator(newtid,AAPTR_DEFAULT);
	SetPointer(AAPTR_TRACER,detectTid);	
	SetActivator(detectTid,AAPTR_TRACER);
	SetPointer(AAPTR_TRACER,newtid);	
	Thing_ChangeTid(newtid,0);
	Thing_ChangeTid(detectTid,0);
}

Script "Unreal_ShockRifleCombo" (void)
{
	int newtid = UniqueTid();
	Thing_ChangeTid(0,newtid);
	SetActivator(0,AAPTR_TRACER);
	//Thing_Remove(newtid);
	SetActorState(0,"Explode",true);
}

/*Script "Unreal_EightballLockOn" (void)
{
	int newtid = UniqueTID()>>16;
	ActivatorTID();
	if(PickActor(0,1.0,1.0,2488,newtid, MF_SHOOTABLE, ML_BLOCKEVERYTHING | ML_BLOCKHITSCAN, PICKAF_FORCETID);
	{
		GiveActorInventory(newtid, "Unreal_EightballLockTimer", 1);
		delay(5);
	}
}	*/

Script "Unreal_CARifleCooldown" (void)
{
    if (CheckInventory("Unreal_CARCooldown") > 0)
    {
        delay(1);
        TakeInventory("Unreal_CARCooldown",1);
        restart;
    }
}	

Script "UnrealHitBox" (int damage, int headshotdmg)
{
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	int newtid = UniqueTID();
	int oldTID = ActivatorTID();
	Thing_ChangeTID(0,newtid);
	SetActivator(0, AAPTR_Tracer);
	int tx = GetActorX(0);
	int ty = GetActorY(0);
	int tz = GetActorZ(0);
	int monsterHealth = GetActorProperty(0,APROP_Health);	
	int height = GetActorProperty(0,APROP_Height);
	int width = GetActorProperty(0,APROP_Radius)*2;
	int result;
	if(!CheckInventory("IsFatButBiped") && width >= height)
	{
		int monsterAngle = GetActorAngle(0);
		int vang = VectorAngle(tx - x, ty - y);
		int angle = vang % 1.0;
		
		if(!CheckInventory("NoHeadShots") && (z <= tz+FixedMul(GetActorProperty(0,APROP_Height),0.35)) && (z >= tz+FixedMul(GetActorProperty(0,APROP_Height),0.65)) && ((abs(monsterAngle - angle)) < 0.65 && (abs(monsterAngle - angle)) > 0.35))
		{
			SetActorProperty(newtid,APROP_DamageType,"UnrealDecapitate");
			if(monsterHealth - (headshotdmg) <= 0)
				GiveInventory("Unreal_HeadshotGibGenerator", 1);			
			SetResultValue(headshotdmg);
		}
		else
		{
			SetResultValue(damage);
		}
	}
	else
	{
		if(!CheckInventory("NoHeadShots") && (z >= tz+FixedMul(GetActorProperty(0,APROP_Height),0.75))/* && (z <= tz+GetActorProperty(0,APROP_Height))*/)
		{
			if(StrLeft(GetActorClass(0),4)=="RTCW")
				GiveInventory("RTCW_RemoveHat",1);
			if(SpawnForced("SamsaraMixerCompendiumToken",0,0,0,0))
				result = ACS_NamedExecuteWithResult("Goldeneye_HatShot",0,0,0,0);
			else
				result = 0;
				
			if(result == -1)
			{
				SetResultValue(-1);
				terminate;
			}
			
			SetActorProperty(newtid,APROP_DamageType,"UnrealDecapitate");
			if(monsterHealth - (headshotdmg) <= 0)
				GiveInventory("Unreal_HeadshotGibGenerator", 1);		
			SetResultValue(headshotdmg);
		}
		else if((z >= tz+FixedMul(GetActorProperty(0,APROP_Height),0.45)) && (z < tz+FixedMul(GetActorProperty(0,APROP_Height),0.75)))
		{
			SetActorProperty(newtid,APROP_DamageType,"UnrealBullet");
			SetResultValue(damage);
		}
		else
		{
			SetResultValue(damage);
		}
	}
	Thing_ChangeTID(newtid,oldTID);
}

Script "Unreal_SpawnShockRifleHitBox" (int type)
{
	str hitbox;
	switch(type)
	{
		case 3:
			hitbox = "UASMDBallHitBox";
			break;
	}
	int bombtid = UniqueTid();
	int newtid = UniqueTid();
	Thing_ChangeTid(0,bombtid);
	SpawnSpotFacingForced(hitbox,0,newtid);
	SetActivator(newtid,AAPTR_DEFAULT);
	SetPointer(AAPTR_TRACER,bombtid);
	Thing_ChangeTid(bombtid,0);
}

Script "Unreal_BloodGenerator_Offsets" (void)
{
	int missilex = GetActorX(0);
	int missiley = GetActorY(0);
	int missilez = GetActorZ(0);
	SetActivator(0,AAPTR_Tracer);
	int enemyx = GetActorX(0);
	int enemyy = GetActorY(0);
	int enemyz = GetActorZ(0);
	int currentangle = GetActorAngle(0);
	int vang = VectorAngle(enemyx - missilex, enemyy - missiley);
	int angle = vang % 1.0;
	TakeInventory("Unreal_BloodGeneratorAngle",999999);
	TakeInventory("Unreal_BloodGeneratorZ",999999);
	GiveInventory("Unreal_BloodGeneratorAngle",angle+65536);
	GiveInventory("Unreal_BloodGeneratorZ",(missilez - enemyz)>>16 + 65536);
}

Script "Unreal_BloodGenerator_Return" (int mode) 
{
	int result;
	switch(mode)
	{
		case 1:
			result = ((CheckInventory("Unreal_BloodGeneratorAngle") - 65536)/182)+180;
			break;
		case 2:
			result = CheckInventory("Unreal_BloodGeneratorZ");
			break;
	}
	SetResultValue(result);
}

Script "Unreal_GibHeightCheck" (void)
{
	int height = (GetActorProperty(0,APROP_Height)>>16);
	//height += height * (3 * (GetActorProperty(0,APROP_Health) <= 0));
	SetResultValue(height);
}

Script "Unreal_EightballReticle" (void)
{
	While(CheckInventory("Unreal_TargetLocked") == 1)
	{
		SetFont("8LOCKCH");
		SetHUDSize(640,480,0);
		HudMessage(s: "A"; HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD, 1624, CR_UNTRANSLATED, 320.0,240.0,0.1,1.0);
		Delay(1);
	}
}		

Script "Unreal_ASMDTrace" (void)
{
	int projX = GetActorX(0);
	int projY = GetActorY(0);
	int projZ = GetActorZ(0);
	SetActivatorToTarget(0);
	int angle = GetActorAngle(0);
	int pitch = GetActorPitch(0);
	int playX = GetActorX(0) + FixedMul(sin(angle),10.0);
	int playY = GetActorY(0) - FixedMul(cos(angle),10.0);
	int playZ = GetActorZ(0) + GetActorViewHeight(0) - 8.0;
	int newtid = UniqueTid();
	
	int vectorX = projX - playX;
	int vectorY = projY - playY;
	int vectorZ = projZ - playZ;
	
	int distance = magnitudeThree_f(vectorX, vectorY, vectorZ);
	
	int offX = FixedDiv(vectorX,distance);
	int offY = FixedDiv(vectorY,distance);
	int offZ = FixedDiv(vectorZ,distance);
	
	for(int a = 35; a < (distance>>16); a+=70)
	{
		SpawnForced("U1ShockRippleB_Small",playX + (a * offX),playY + (a * offY),playZ + (a * offZ), newtid);
		SetActorAngle(newtid,angle);
		SetActorPitch(newtid,-pitch);
		Delay(2);
		while(ThingCountName("U1ShockRippleB_Small",newtid) > 15)
			Delay(1);
	}
}

Script "Unreal_TransferCharge" (int target)
{
//	if(target)
		SetActivatorToTarget(0);
	
//	PrintBold(d:CheckInventory("UDispChargePower"));
	SetResultValue(CheckInventory("UDispChargePower"));
}

Script "Unreal_RevertUpgrade" (void)
{
	GiveInventory("UnrealDoUpgradeRevert",1);
	Delay(9);
	TakeInventory("UnrealDoUpgradeRevert",1);
}

Script "Unreal_GibScale" (void)
{
			int oldTID = ActivatorTID();
			int target = UniqueTID();
			Thing_ChangeTID(0, target);
			SetActivator(0,AAPTR_Master);
			int height = (GetActorProperty(0,APROP_Height)*4)>>16;
			int radius = GetActorProperty(0,APROP_Radius)>>16;
			//To make up for my mistake that is too widespread to address head on, I will do it here
			SetActorPosition(target,GetActorX(0),GetActorY(0),GetActorZ(0)+(height/2),0);

			SetActivator(target);
			Thing_ChangeTID(target, oldTID);
			int spacecube = height*radius*radius;
			if(spacecube < 5000) { SetActorProperty(0,APROP_ScaleX,1.0); SetActorProperty(0,APROP_ScaleY,1.0); }
			else if(spacecube < 50000) { SetActorProperty(0,APROP_ScaleX,1.2); SetActorProperty(0,APROP_ScaleY,1.2); }
			else if(spacecube < 500000) { SetActorProperty(0,APROP_ScaleX,1.5); SetActorProperty(0,APROP_ScaleY,1.5); }
			else if(spacecube < 1000000) { SetActorProperty(0,APROP_ScaleX,2.0); SetActorProperty(0,APROP_ScaleY,2.0); }
			else { SetActorProperty(0,APROP_ScaleX,1.0); SetActorProperty(0,APROP_ScaleY,1.0); }
}			
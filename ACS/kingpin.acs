#library "KINGPIN"
#include "zcommon.acs"
#include "commonFuncs.acs"

Script "GlobalRecoil" (int duration, int intensity, int halfdampen)
{
	int i = 0;
	for(i = 0; i < duration; i++)
	{
		SetActorPitch(0,GetActorPitch(0)-intensity);
		Delay(1);
	}
	for(i = duration; i > 0; i--)
	{
		SetActorPitch(0,GetActorPitch(0)+intensity/(halfdampen+1));
		Delay(1);
	}
}

//A decorate won't convert a decimal to a floating point as far as my knowledge goes, so it's up to the decorate to multiply the intended decimal by 65536
Script "Kingpin_FX" (int type, int duration, int maxSize)
{
	int i = 0;
	int startScaleX = GetActorProperty(0,APROP_ScaleX);
	int startScaleY = GetActorProperty(0,APROP_ScaleY);
	switch(type)
	{
		case 1:
			for(i = 0; i <= duration; i++)
			{
				//SetActorProperty(0,APROP_Alpha,(1.0/duration)*i);
				SetActorProperty(0,APROP_ScaleX,startScaleX+(maxSize/duration)*i);
				SetActorProperty(0,APROP_ScaleY,startScaleY+(maxSize/duration)*i);
				Delay(1);
			}
			for(i = duration; i >= 0; i--)
			{
				SetActorProperty(0,APROP_Alpha,(1.0/duration)*i);
				Delay(1);
			}
			Thing_Remove(0);
			break;
		case 2:
			for(i = 0; i <= duration; i++)
			{
				SetActorProperty(0,APROP_ScaleX,startScaleX+(maxSize/duration)*i);
				SetActorProperty(0,APROP_ScaleY,startScaleY+(maxSize/duration)*i);
				Delay(1);
			}
			Thing_Remove(0);
			break;
	}
}

Script "Kingpin_GrenadeFuse" (void)
{
	GiveInventory("Kingpin_GrenadeFuse",105);
	while(CheckInventory("Kingpin_GrenadeFuse") > 0)
	{
		TakeInventory("Kingpin_GrenadeFuse",1);
		Delay(1);
	}
}

Script "Kingpin_BloodGenerator_Offsets" (void)
{
	int missilex = GetActorX(0);
	int missiley = GetActorY(0);
	int missilez = GetActorZ(0);
	int missileAngle = GetActorAngle(0);
	SetActivator(0,AAPTR_Tracer);

	int enemyx = GetActorX(0);
	int enemyy = GetActorY(0);
	int enemyz = GetActorZ(0);
	int currentangle = GetActorAngle(0);
	int vang = VectorAngle(enemyx - missilex, enemyy - missiley);
	int angle = vang % 1.0;
	SetInventory("Kingpin_BloodGeneratorAngle",angle+65536);
	SetInventory("Kingpin_BloodGeneratorBleedAngle",missileAngle+65536);
	SetInventory("Kingpin_BloodGeneratorZ",(missilez - enemyz)>>16 + 65536);
}

Script "Kingpin_BloodGenerator_Return" (int mode)
{
	int result;
	switch(mode)
	{
		case 1:
			result = ((CheckInventory("Kingpin_BloodGeneratorAngle") - 65536)/182)+180;
			break;
		case 2:
			result = CheckInventory("Kingpin_BloodGeneratorZ");
			break;
		case 3:
			result = ((CheckInventory("Kingpin_BloodGeneratorBleedAngle") - 65536)/182);
			break;
	}
	SetResultValue(result);
}

Script "Kingpin_BloodPool" (void)
{
	int ownerTid = uniqueTid();
	SpawnForced("Kingpin_BloodPool",GetActorX(0),GetActorY(0),GetActorFloorZ(0),ownerTid);
	Thing_SetTranslation(ownerTid,-1);
	SetActivator(0,AAPTR_MASTER);
	SetPointerExt(AAPTR_MASTER,0,ownerTid);
	SetActorProperty(ownerTid,APROP_ScaleX,GetActorProperty(0,APROP_Radius)/20);
	Thing_ChangeTid(ownerTid,0);
}

#DEFINE MAXTRAILS 64

Script "Kingpin_TrailLimiter" (void)
{
	int actorCount = ThingCountName(GetActorClass(0),0);
	if(actorCount > MAXTRAILS)
		GiveInventory("Kingpin_TrailLimiter",actorCount > MAXTRAILS * 2 ? 2 : 1);

}

Script "Kingpin_GibTransfer" (void)
{
	int gibTid = uniqueTid();
	int timerValue = CheckInventory("Kingpin_GibLifeSpan");
	int frame = CheckInventory("Kingpin_GibFrame");
	SpawnForced("Kingpin_GibStay",GetActorX(0),GetActorY(0),GetActorZ(0),gibTid);
	SetActorProperty(gibTid,APROP_ScaleX,GetActorProperty(0,APROP_ScaleX));
	SetActorProperty(gibTid,APROP_ScaleY,GetActorProperty(0,APROP_ScaleY));
	GiveActorInventory(gibTid,"Kingpin_GibLifeSpan",timerValue);
	GiveActorInventory(gibTid,"Kingpin_GibFrame",frame);
	Thing_SetTranslation(gibTid,-1);
	Thing_ChangeTid(gibTid,0);
}

Script "Kingpin_GibSpawner" (void)
{
	int gibTid = uniqueTid();
	int thisTid = uniqueTid();
	Thing_ChangeTid(0,thisTid);
	SetActivator(0,AAPTR_Master);
	int height = GetActorProperty(0,APROP_Height)*4;
	int radius = GetActorProperty(0,APROP_Radius);
	Thing_Remove(0);
	SetActivator(thisTid);
	Thing_ChangeTid(thisTid,0);
	int gibScale = (((height>>16)*(radius>>16))<<16)/1120;
	int throwAngle, throwPitch, horzVelocity;
	for(int a = 0; a < radius/65536; a++)
	{
		throwAngle = random(0,1.0);
		throwPitch = random(-0.25,0.25);
		horzVelocity = 12*cos(throwPitch);
		SpawnForced("Kingpin_Gib",GetActorX(0)+random(-radius/2,radius/2),GetActorY(0)+random(-radius/2,radius/2),GetActorZ(0)+random(height/10,height-(height/10)),gibTid);
		SetActorVelocity(gibTid,FixedMul(horzVelocity,cos(throwAngle)),FixedMul(horzVelocity,sin(throwAngle)),12*sin(throwPitch),0,0);
		SetActorProperty(gibTid,APROP_ScaleX,gibScale);
		SetActorProperty(gibTid,APROP_ScaleY,gibScale);
		Thing_SetTranslation(gibTid,-1);
		Thing_ChangeTid(gibTid,0);
	}
}

Script "Kingpin_Player" Enter
{
	while(true)
	{
		SetAmmoCapacity("Kingpin_TommyGunMagazine",50*(1+CheckInventory("Kingpin_TommyGun_MagazineCapacity")));
		SetAmmoCapacity("Kingpin_GrenadeLauncherMagazine",3*(1+CheckInventory("Kingpin_GrenadeLauncher_MagazineCapacity")));
		
		if(CheckInventory("Kingpin_Bazooka_LaserSystem") && CheckWeapon("Kingpin_Bazooka"))
			GiveInventory("Kingpin_Bazooka_LaserSight",1);
		
		HudMessage(d:CheckInventory("Kingpin_Cash");HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN,5,CR_UNTRANSLATED,0.1,0.9,0.0);
		
		Delay(1);
	}
}

Script "Kingpin_RocketFlare" (void)
{
	int flareTid = uniqueTid();
	SpawnForced("Kingpin_RocketFlare",0,0,0,flareTid);
	SetPointerExt(AAPTR_MASTER,0,flareTid);
	Thing_ChangeTid(flareTid,0);
}

Script "Kingpin_NukeFlash" (void)
{
	FadeRange(255,255,255,1.0,0,0,0,0,1.0);
}

Script "Kingpin_Bazooka" (int type, int arg1, int arg2)
{
	int lTid;
	switch(type)
	{
		case 0:
			SetPointer(AAPTR_TRACER,arg1);
			break;
		case 1:
			int myTid = ActivatorTid();
			int missileTid = uniqueTid();
			Thing_ChangeTid(0,missileTid);
			SetActivator(0,AAPTR_Target);
			lTid = abs(CheckInventory("Kingpin_Bazooka_LaserTiD"));
			SetActivator(missileTid);
			Thing_ChangeTid(missileTid,0);
			ACS_NamedExecuteWithResult("Kingpin_Bazooka",0,lTid);
			break;
		case 2:
			lTid = uniqueTid();
			SpawnForced("Kingpin_Bazooka_Seeker",GetActorX(0),GetActorY(0),GetActorZ(0),lTid);
			SetActivator(0,AAPTR_Target);
			SetInventory("Kingpin_Bazooka_LaserTiD",0);
			GiveInventory("Kingpin_Bazooka_LaserTiD",lTid);
			break;	
	}
}

Script "Kingpin_ThrowMoney" (void)
{
	int moneyTid = UniqueTid();
	int monsterHealth = GetActorProperty(0,APROP_SpawnHealth);
	str moneyActor = "Kingpin_CashPickup";
	if(monsterHealth >= 1000) moneyActor = "Kingpin_CashPickupBagS";
	else if(monsterHealth >= 500) moneyActor = "Kingpin_CashPickupBagS";
	SpawnForced(moneyActor,GetActorX(0),GetActorY(0),GetActorZ(0)+(GetActorProperty(0,APROP_Height)*2),moneyTid);
	SetActorAngle(moneyTid,random(0,1.0));
	SetActorVelocity(moneyTid,4*cos(GetActorAngle(moneyTid)),4*sin(GetActorAngle(moneyTid)),random(0,4.0),0,0);
	Thing_ChangeTid(moneyTid,random(1,monsterHealth/10));
}

Script "Kingpin_Flamethrower" (void)
{
	While(CheckInventory("Kingpin_Flamethrower_Hold"))
	{
		Playsound(0,strparam(s:"Kingpin/Flamethrower/Flame",d:((timer()%3))+1),CHAN_AUTO,1.0,0,ATTN_NORM);
		GiveInventory("Kingpin_Flamethrower_FireTrigger",1);
		Delay(1);
	}
}

Script "Kingpin_FlamethrowerDistance" (int px, int py, int pz)
{
	int rX = GetActorX(0)/65536 - px;
	int rY = GetActorY(0)/65536 - py;
	int rZ = GetActorZ(0)/65536 - pz;
	int result = sqrt(rX*rX + rY*rY + rZ*rZ);
	//PrintBold(s:"Trail Start X: ",d:px,s:"Trail Start Y: ",d:py,s:"Trail Start Z: ",d:pz,s:"\n",s:"Trail End X: ",d:GetActorX(0)>>16,s:"Trail End Y: ",d:GetActorY(0)>>16,s:"Trail End Z: ",d:GetActorZ(0)>>16);
	SetResultValue(result);
}

Script "Kingpin_ReturnUpgrade" (int upgrade)
{
	SetActivator(0,AAPTR_Target);
	switch(upgrade)
	{
		case 21:
			SetResultValue(CheckInventory("Kingpin_Flamethrower_Range"));
			break;
	}
}

Script "Kingpin_FlamethrowerTracer" (int upgrade)
{
	int myOldTid = ActivatorTid();
	int myTid = UniqueTid();
	Thing_ChangeTid(0, myTid);

	SetActivator(0,AAPTR_Tracer);

	int requiredIgnition = (ClassifyActor(0) & ACTOR_Player || ClassifyActor(0) & ACTOR_Bot ? 6 : CheckFlag(0,"NOBLOOD") ? 72 : 36)/upgrade;

	int actorClass = ClassifyActor(0);
	if(!(actorClass & ACTOR_ALIVE) && !(actorClass & ACTOR_MONSTER || (!isSinglePlayer() && !isCoop() && (isPlayerOrBot(0) || GetActorProperty(0, APROP_FRIENDLY)))))
		terminate;

	if(!CheckInventory("Kingpin_FlamethrowerHitTarget"))
	{
		if(!CheckInventory("Kingpin_FlamethrowerBurnt"))
		{
			GiveInventory("Kingpin_FlamethrowerHitTarget",1);
			GiveInventory("Kingpin_FlamethrowerIgnition",1);

			if(CheckInventory("Kingpin_FlamethrowerIgnition") >= requiredIgnition && !CheckInventory("Kingpin_FlamethrowerBurnt"))
			{
				TakeInventory("Kingpin_FlamethrowerHitTarget",1);
				TakeInventory("Kingpin_FlamethrowerIgnition",50);
				GiveInventory("Kingpin_FlamethrowerBurnt",1);
				GiveInventory("Kingpin_FlamethrowerStacker",1);
				ACS_NamedExecuteWithResult("Kingpin_Decorate",8);
				int burnerTid = UniqueTid();
				if(CheckInventory("Kingpin_IsMale")) PlaySound(0,"Kingpin/Flamethrower/Burn",CHAN_AUTO,1.0,0,ATTN_NORM);
				SpawnForced("Kingpin_FlamethrowerBurner",GetActorX(0),GetActorY(0),GetActorZ(0),burnerTid);
				SetActivator(myTid,AAPTR_Target);
				SetPointerExt(AAPTR_Target,0,burnerTid);
				SetActivator(myTid,AAPTR_Tracer);
				SetPointerExt(AAPTR_Tracer,0,burnerTid);
				Thing_ChangeTid(myTid, myOldTid);
				terminate;
			}

			Thing_ChangeTid(myTid, myOldTid);
			Delay(1);
			TakeInventory("Kingpin_FlamethrowerHitTarget",1);

			Delay(105);
			if(!CheckInventory("Kingpin_FlamethrowerBurnt")) TakeInventory("Kingpin_FlamethrowerIgnition",1);
		}
		else
		{		
			GiveInventory("Kingpin_FlamethrowerHitTarget",1);
			GiveInventory("Kingpin_FlamethrowerIgnition",1);
			if(CheckInventory("Kingpin_FlamethrowerIgnition") >= requiredIgnition)
			{
				TakeInventory("Kingpin_FlamethrowerHitTarget",1);
				TakeInventory("Kingpin_FlamethrowerIgnition",50);
				GiveInventory("Kingpin_FlamethrowerStacker",1);
				Thing_ChangeTid(myTid, myOldTid);
				ACS_NamedExecuteWithResult("Kingpin_Decorate",8);
				terminate;
			}

			Thing_ChangeTid(myTid, myOldTid);
			Delay(1);
			TakeInventory("Kingpin_FlamethrowerHitTarget",1);

			Delay(105);
			if(!CheckInventory("Kingpin_FlamethrowerBurnt")) TakeInventory("Kingpin_FlamethrowerIgnition",1);
		}
	}
	else
		Thing_ChangeTid(myTid, myOldTid);
}

Script "Kingpin_EnemyBurn" (void)
{
	int radius = GetActorProperty(0,APROP_Radius)/4;
	int height = GetActorProperty(0,APROP_Height);
	While(CheckInventory("Kingpin_OnFire"))
	{
		SpawnForced("Kingpin_FlamethrowerFireVisual",GetActorX(0)+randSign()*radius,GetActorY(0)+randSign()*radius,GetActorZ(0)+random(0,height*4),0);
		Delay(2);
	}
}

Script "Kingpin_BurnHandler" (void)
{
	if(ACS_NamedExecuteWithResult("Kingpin_BurningOnPlayer"))
	{
		while(ACS_NamedExecuteWithResult("Kingpin_BurningPlayerIsAlive") && ClassifyActor(0) > 1)
		{
			if(ACS_NamedExecuteWithResult("Kingpin_Decorate",10) <= 0)
			{
				SetActorState(0,"Remove",1);
				terminate;
			}
			Delay(2);
		}
	}
	else
	{
		while(ACS_NamedExecuteWithResult("Kingpin_BurningPlayerIsAlive") && ClassifyActor(0) > 1)
		{
			if(ACS_NamedExecuteWithResult("Kingpin_Decorate",10) <= 0)
			{
				SetActorState(0,"Remove",1);
				terminate;
			}
			Delay(2);
		}
	}
}

Script "Kingpin_BurningPlayerIsAlive" (void)
{
	SetActivator(0,AAPTR_Tracer);
	if(ClassifyActor(0) & ACTOR_Alive)
		SetResultValue(1);
	else
		SetResultValue(0);
}

Script "Kingpin_BurningOnPlayer" (void)
{
	SetActivator(0,AAPTR_Tracer);
	if(ClassifyActor(0) & ACTOR_Player || ClassifyActor(0) & ACTOR_Bot)
	{
		//ACS_NamedExecuteWithResult("Kingpin_ScreenBurn");
		SetResultValue(1);
	}
	else
	{
		SetResultValue(0);
	}
}

Script "Kingpin_Decorate" (int type, int arg1, int arg2)
{
	switch(type)
	{
		case 1:
			SetResultValue(2-CheckInventory("Kingpin_Flamethrower_FuelPump"));
			break;
		case 2:
			SetActivator(0,AAPTR_Target);
			SetResultValue(1+(2*CheckInventory("Kingpin_Flamethrower_HotterFlame")));
			break;
		case 3:
			SetResultValue(1+(2*CheckInventory("Kingpin_HMG_SelectFire")));
			break;
		case 4:
			SetResultValue(CheckInventory("Kingpin_HMG_ScopeActive"));
			break;
		case 8:
			Delay(105);
			TakeInventory("Kingpin_FlamethrowerStacker",1);
			break;
		case 9: //Flamethrower burn visuals
			SetActivator(0,AAPTR_Tracer);
			if(arg1 == 0)
				SetResultValue(GetActorProperty(0,APROP_Radius)>>16);
			else
				SetResultValue(GetActorProperty(0,APROP_Height)>>16);
			break;
		case 10:
			SetActivator(0,AAPTR_Tracer);
			SetResultValue(CheckInventory("Kingpin_FlamethrowerStacker"));
			break;
	}
}

Script "Kingpin_ScopeClient" (void) clientside
{
	FadeTo(0.0,0.0,0.0,1.0,0);
	FadeTo(0.0,0.0,0.0,0.0,0.5);
	While(CheckInventory("Kingpin_HMG_ScopeActive"))
	{
		SetHudSize(256,256,0);
		SetFont("KPSCOPE");

		HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD, 1600, CR_UNTRANSLATED, 128.0, 128.0, 0, 1.0);

		Delay(1);
	}
	FadeTo(0.0,0.0,0.0,1.0,0);
	FadeTo(0.0,0.0,0.0,0.0,0.5);
	HudMessage(s:""; HUDMSG_PLAIN|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD, 1600, CR_UNTRANSLATED, 128.0, 128.0, 0.1, 0.0);
}